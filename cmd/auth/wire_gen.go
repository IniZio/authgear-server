// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/getsentry/sentry-go"
	"github.com/google/wire"
	"github.com/gorilla/mux"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/webapp"
	sentry2 "github.com/skygeario/skygear-server/pkg/core/sentry"
	"github.com/skygeario/skygear-server/pkg/deps"
	"github.com/skygeario/skygear-server/pkg/middlewares"
	"net/http"
)

// Injectors from wire.go:

func newSentryMiddleware(hub *sentry.Hub, p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	sentryMiddleware := &sentry2.Middleware{
		Hub:          hub,
		ServerConfig: serverConfig,
	}
	middlewareFunc := provideMiddlewareFunc(sentryMiddleware)
	return middlewareFunc
}

func newRecoverMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	recoveryLogger := middlewares.NewRecoveryLogger(factory)
	recoverMiddleware := &middlewares.RecoverMiddleware{
		Logger: recoveryLogger,
	}
	middlewareFunc := provideMiddlewareFunc(recoverMiddleware)
	return middlewareFunc
}

func newCORSMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	corsMiddleware := &middlewares.CORSMiddleware{
		Config: httpConfig,
	}
	middlewareFunc := provideMiddlewareFunc(corsMiddleware)
	return middlewareFunc
}

func newCSPMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	oAuthConfig := appConfig.OAuth
	cspMiddleware := &webapp.CSPMiddleware{
		Config: oAuthConfig,
	}
	middlewareFunc := provideMiddlewareFunc(cspMiddleware)
	return middlewareFunc
}

func newCSRFMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	config := appProvider.Config
	secretConfig := config.SecretConfig
	csrfKeyMaterials := deps.ProvideCSRFKeyMaterials(secretConfig)
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	csrfMiddleware := &webapp.CSRFMiddleware{
		Secret: csrfKeyMaterials,
		Config: serverConfig,
	}
	middlewareFunc := provideMiddlewareFunc(csrfMiddleware)
	return middlewareFunc
}

func newAuthEntryPointMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	authEntryPointMiddleware := &webapp.AuthEntryPointMiddleware{
		ServerConfig: serverConfig,
	}
	middlewareFunc := provideMiddlewareFunc(authEntryPointMiddleware)
	return middlewareFunc
}

// wire.go:

type middleware interface {
	Handle(next http.Handler) http.Handler
}

func provideMiddlewareFunc(m middleware) mux.MiddlewareFunc { return m.Handle }

var middlewareDependencySet = wire.NewSet(deps.RequestDependencySet, provideMiddlewareFunc)

func newSentryMiddlewareFactory(hub *sentry.Hub) func(*deps.RequestProvider) mux.MiddlewareFunc {
	return func(p *deps.RequestProvider) mux.MiddlewareFunc {
		return newSentryMiddleware(hub, p)
	}
}
