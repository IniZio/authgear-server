// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/getsentry/sentry-go"
	"github.com/google/wire"
	"github.com/gorilla/mux"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/auth"
	redis3 "github.com/skygeario/skygear-server/pkg/auth/dependency/auth/redis"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/bearertoken"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/oob"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/password"
	provider2 "github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/provider"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/recoverycode"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/totp"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/challenge"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/forgotpassword"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/hook"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/anonymous"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/loginid"
	oauth3 "github.com/skygeario/skygear-server/pkg/auth/dependency/identity/oauth"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/provider"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/interaction"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/interaction/flows"
	redis2 "github.com/skygeario/skygear-server/pkg/auth/dependency/interaction/redis"
	oauth2 "github.com/skygeario/skygear-server/pkg/auth/dependency/oauth"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/oauth/handler"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/oauth/pq"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/oauth/redis"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/oidc"
	handler2 "github.com/skygeario/skygear-server/pkg/auth/dependency/oidc/handler"
	session2 "github.com/skygeario/skygear-server/pkg/auth/dependency/session"
	redis4 "github.com/skygeario/skygear-server/pkg/auth/dependency/session/redis"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/sso"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/user"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/webapp"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/welcomemessage"
	"github.com/skygeario/skygear-server/pkg/auth/handler/oauth"
	"github.com/skygeario/skygear-server/pkg/auth/handler/session"
	webapp2 "github.com/skygeario/skygear-server/pkg/auth/handler/webapp"
	task2 "github.com/skygeario/skygear-server/pkg/auth/task"
	"github.com/skygeario/skygear-server/pkg/clock"
	"github.com/skygeario/skygear-server/pkg/core/rand"
	sentry2 "github.com/skygeario/skygear-server/pkg/core/sentry"
	"github.com/skygeario/skygear-server/pkg/db"
	"github.com/skygeario/skygear-server/pkg/deps"
	"github.com/skygeario/skygear-server/pkg/endpoints"
	"github.com/skygeario/skygear-server/pkg/mail"
	"github.com/skygeario/skygear-server/pkg/middlewares"
	"github.com/skygeario/skygear-server/pkg/sms"
	"github.com/skygeario/skygear-server/pkg/task"
	"github.com/skygeario/skygear-server/pkg/task/queue"
	"net/http"
)

// Injectors from wire_handler.go:

func newSessionResolveHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	config := appProvider.Config
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	store := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	provider := &anonymous.Provider{
		Store: store,
	}
	factory := appProvider.LoggerFactory
	resolveHandlerLogger := session.NewResolveHandlerLogger(factory)
	resolveHandler := &session.ResolveHandler{
		Anonymous: provider,
		Logger:    resolveHandlerLogger,
	}
	return resolveHandler
}

func newOAuthAuthorizeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	authorizeHandlerLogger := oauth.NewAuthorizeHandlerLogger(factory)
	context := appProvider.DbContext
	contextContext := appProvider.Context
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	authorizationHandlerLogger := handler.NewAuthorizationHandlerLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	redisContext := appProvider.RedisContext
	logger := redis.NewLogger(factory)
	clock := _wireSystemClockValue
	grantStore := &redis.GrantStore{
		Redis:       redisContext,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clock,
	}
	request := p.Request
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	urlProvider := &oauth2.URLProvider{
		Endpoints: endpointsProvider,
	}
	authenticationConfig := appConfig.Authentication
	store := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clock,
	}
	interactionLogger := interaction.NewLogger(factory)
	identityConfig := appConfig.Identity
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clock,
	}
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	messagingConfig := appConfig.Messaging
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	engine := appProvider.TemplateEngine
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	hookLogger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    hookLogger,
		DBContext: context,
		Clock:     clock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := &interaction.Provider{
		Store:         store,
		Clock:         clock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	webappURLProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	scopesValidator := _wireScopesValidatorValue
	tokenGenerator := _wireTokenGeneratorValue
	authorizationHandler := &handler.AuthorizationHandler{
		Context:        contextContext,
		AppID:          appID,
		Config:         oAuthConfig,
		Logger:         authorizationHandlerLogger,
		Authorizations: authorizationStore,
		CodeGrants:     grantStore,
		OAuthURLs:      urlProvider,
		WebAppURLs:     webappURLProvider,
		ValidateScopes: scopesValidator,
		CodeGenerator:  tokenGenerator,
		Clock:          clock,
	}
	authorizeHandler := &oauth.AuthorizeHandler{
		Logger:       authorizeHandlerLogger,
		DBContext:    context,
		AuthzHandler: authorizationHandler,
	}
	return authorizeHandler
}

var (
	_wireSystemClockValue     = clock.NewSystemClock()
	_wireScopesValidatorValue = handler.ScopesValidator(oidc.ValidateScopes)
	_wireTokenGeneratorValue  = handler.TokenGenerator(oauth2.GenerateToken)
)

func newOAuthTokenHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	tokenHandlerLogger := oauth.NewTokenHandlerLogger(factory)
	context := appProvider.DbContext
	request := p.Request
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	handlerTokenHandlerLogger := handler.NewTokenHandlerLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	redisContext := appProvider.RedisContext
	logger := redis.NewLogger(factory)
	clockClock := _wireSystemClockValue
	grantStore := &redis.GrantStore{
		Redis:       redisContext,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := auth.AccessEventProvider{
		Store: eventStore,
	}
	redisLogger := redis4.NewLogger(factory)
	store := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	authAccessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionConfig := appConfig.Session
	rand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store,
		AccessEvents: authAccessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       rand,
	}
	authenticationConfig := appConfig.Authentication
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	identityConfig := appConfig.Identity
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	contextContext := appProvider.Context
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	messagingConfig := appConfig.Messaging
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	engine := appProvider.TemplateEngine
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	hookLogger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    hookLogger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	oidcKeyMaterials := deps.ProvideOIDCKeyMaterials(secretConfig)
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets:   oidcKeyMaterials,
		Endpoints: endpointsProvider,
		Users:     queries,
		Clock:     clockClock,
	}
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := &handler.TokenHandler{
		Request:        request,
		AppID:          appID,
		Config:         oAuthConfig,
		ServerConfig:   serverConfig,
		Logger:         handlerTokenHandlerLogger,
		Authorizations: authorizationStore,
		CodeGrants:     grantStore,
		OfflineGrants:  grantStore,
		AccessGrants:   grantStore,
		AccessEvents:   accessEventProvider,
		Sessions:       sessionProvider,
		Anonymous:      anonymousFlow,
		IDTokenIssuer:  idTokenIssuer,
		GenerateToken:  tokenGenerator,
		Clock:          clockClock,
	}
	oauthTokenHandler := &oauth.TokenHandler{
		Logger:       tokenHandlerLogger,
		DBContext:    context,
		TokenHandler: tokenHandler,
	}
	return oauthTokenHandler
}

var (
	_wireRandValue = session2.Rand(rand.SecureRand)
)

func newOAuthRevokeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	revokeHandlerLogger := oauth.NewRevokeHandlerLogger(factory)
	context := appProvider.DbContext
	redisContext := appProvider.RedisContext
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	logger := redis.NewLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	clockClock := _wireSystemClockValue
	grantStore := &redis.GrantStore{
		Redis:       redisContext,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	revokeHandler := &handler.RevokeHandler{
		OfflineGrants: grantStore,
		AccessGrants:  grantStore,
	}
	oauthRevokeHandler := &oauth.RevokeHandler{
		Logger:        revokeHandlerLogger,
		DBContext:     context,
		RevokeHandler: revokeHandler,
	}
	return oauthRevokeHandler
}

func newOAuthMetadataHandler(p *deps.RequestProvider) http.Handler {
	request := p.Request
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	metadataProvider := &oauth2.MetadataProvider{
		Endpoints: endpointsProvider,
	}
	oidcMetadataProvider := &oidc.MetadataProvider{
		Endpoints: endpointsProvider,
	}
	v := deps.ProvideOAuthMetadataProviders(metadataProvider, oidcMetadataProvider)
	metadataHandler := &oauth.MetadataHandler{
		Providers: v,
	}
	return metadataHandler
}

func newOAuthJWKSHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	jwksHandlerLogger := oauth.NewJWKSHandlerLogger(factory)
	config := appProvider.Config
	secretConfig := config.SecretConfig
	oidcKeyMaterials := deps.ProvideOIDCKeyMaterials(secretConfig)
	request := p.Request
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	clockClock := _wireSystemClockValue
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets:   oidcKeyMaterials,
		Endpoints: endpointsProvider,
		Users:     queries,
		Clock:     clockClock,
	}
	jwksHandler := &oauth.JWKSHandler{
		Logger: jwksHandlerLogger,
		JWKS:   idTokenIssuer,
	}
	return jwksHandler
}

func newOAuthUserInfoHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	userInfoHandlerLogger := oauth.NewUserInfoHandlerLogger(factory)
	context := appProvider.DbContext
	config := appProvider.Config
	secretConfig := config.SecretConfig
	oidcKeyMaterials := deps.ProvideOIDCKeyMaterials(secretConfig)
	request := p.Request
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	clockClock := _wireSystemClockValue
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets:   oidcKeyMaterials,
		Endpoints: endpointsProvider,
		Users:     queries,
		Clock:     clockClock,
	}
	userInfoHandler := &oauth.UserInfoHandler{
		Logger:           userInfoHandlerLogger,
		DBContext:        context,
		UserInfoProvider: idTokenIssuer,
	}
	return userInfoHandler
}

func newOAuthEndSessionHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	endSessionHandlerLogger := oauth.NewEndSessionHandlerLogger(factory)
	context := appProvider.DbContext
	config := appProvider.Config
	appConfig := config.AppConfig
	oAuthConfig := appConfig.OAuth
	request := p.Request
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	authenticationConfig := appConfig.Authentication
	redisContext := appProvider.RedisContext
	appID := appConfig.ID
	clockClock := _wireSystemClockValue
	store := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	logger := interaction.NewLogger(factory)
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	contextContext := appProvider.Context
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	messagingConfig := appConfig.Messaging
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	engine := appProvider.TemplateEngine
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	hookLogger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    hookLogger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := &interaction.Provider{
		Store:         store,
		Clock:         clockClock,
		Logger:        logger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	endSessionHandler := &handler2.EndSessionHandler{
		Config:    oAuthConfig,
		Endpoints: endpointsProvider,
		URLs:      urlProvider,
	}
	oauthEndSessionHandler := &oauth.EndSessionHandler{
		Logger:            endSessionHandlerLogger,
		DBContext:         context,
		EndSessionHandler: endSessionHandler,
	}
	return oauthEndSessionHandler
}

func newOAuthChallengeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	context := appProvider.RedisContext
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	clockClock := _wireSystemClockValue
	challengeProvider := &challenge.Provider{
		Redis: context,
		AppID: appID,
		Clock: clockClock,
	}
	challengeHandler := &oauth.ChallengeHandler{
		Challenges: challengeProvider,
	}
	return challengeHandler
}

func newWebAppRootHandler(p *deps.RequestProvider) http.Handler {
	rootHandler := &webapp2.RootHandler{}
	return rootHandler
}

func newWebAppLoginHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	loginHandler := &webapp2.LoginHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return loginHandler
}

func newWebAppSignupHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	signupHandler := &webapp2.SignupHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return signupHandler
}

func newWebAppPromoteHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	promoteHandler := &webapp2.PromoteHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return promoteHandler
}

func newWebAppSSOCallbackHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	ssoCallbackHandler := &webapp2.SSOCallbackHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return ssoCallbackHandler
}

func newWebAppEnterLoginIDHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	enterLoginIDHandler := &webapp2.EnterLoginIDHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return enterLoginIDHandler
}

func newWebAppEnterPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	enterPasswordHandler := &webapp2.EnterPasswordHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return enterPasswordHandler
}

func newWebAppCreatePasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	createPasswordHandler := &webapp2.CreatePasswordHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return createPasswordHandler
}

func newWebAppOOBOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	oAuthSSOConfig := identityConfig.OAuth
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	oobotpHandler := &webapp2.OOBOTPHandler{
		Provider:  authenticateProviderImpl,
		DBContext: context,
	}
	return oobotpHandler
}

func newWebAppForgotPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Redis: redisContext,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := &forgotpassword.Provider{
		Context:         contextContext,
		ServerConfig:    serverConfig,
		Localization:    localizationConfig,
		AppMetadata:     appMetadata,
		Messaging:       messagingConfig,
		Config:          forgotPasswordConfig,
		Store:           forgotpasswordStore,
		Users:           queries,
		Hooks:           hookProvider,
		Clock:           clockClock,
		URLs:            urlProvider,
		TemplateEngine:  engine,
		TaskQueue:       queueQueue,
		Interactions:    passwordFlow,
		LoginIDProvider: loginidProvider,
	}
	forgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProviderImpl,
		RenderProvider:   renderProviderImpl,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	forgotPasswordHandler := &webapp2.ForgotPasswordHandler{
		Provider:  forgotPasswordProvider,
		DBContext: context,
	}
	return forgotPasswordHandler
}

func newWebAppForgotPasswordSuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Redis: redisContext,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := &forgotpassword.Provider{
		Context:         contextContext,
		ServerConfig:    serverConfig,
		Localization:    localizationConfig,
		AppMetadata:     appMetadata,
		Messaging:       messagingConfig,
		Config:          forgotPasswordConfig,
		Store:           forgotpasswordStore,
		Users:           queries,
		Hooks:           hookProvider,
		Clock:           clockClock,
		URLs:            urlProvider,
		TemplateEngine:  engine,
		TaskQueue:       queueQueue,
		Interactions:    passwordFlow,
		LoginIDProvider: loginidProvider,
	}
	forgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProviderImpl,
		RenderProvider:   renderProviderImpl,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	forgotPasswordSuccessHandler := &webapp2.ForgotPasswordSuccessHandler{
		Provider:  forgotPasswordProvider,
		DBContext: context,
	}
	return forgotPasswordSuccessHandler
}

func newWebAppResetPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Redis: redisContext,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := &forgotpassword.Provider{
		Context:         contextContext,
		ServerConfig:    serverConfig,
		Localization:    localizationConfig,
		AppMetadata:     appMetadata,
		Messaging:       messagingConfig,
		Config:          forgotPasswordConfig,
		Store:           forgotpasswordStore,
		Users:           queries,
		Hooks:           hookProvider,
		Clock:           clockClock,
		URLs:            urlProvider,
		TemplateEngine:  engine,
		TaskQueue:       queueQueue,
		Interactions:    passwordFlow,
		LoginIDProvider: loginidProvider,
	}
	forgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProviderImpl,
		RenderProvider:   renderProviderImpl,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	resetPasswordHandler := &webapp2.ResetPasswordHandler{
		Provider:  forgotPasswordProvider,
		DBContext: context,
	}
	return resetPasswordHandler
}

func newWebAppResetPasswordSuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	uiConfig := appConfig.UI
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	authenticationConfig := appConfig.Authentication
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		Redis: redisContext,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := &forgotpassword.Provider{
		Context:         contextContext,
		ServerConfig:    serverConfig,
		Localization:    localizationConfig,
		AppMetadata:     appMetadata,
		Messaging:       messagingConfig,
		Config:          forgotPasswordConfig,
		Store:           forgotpasswordStore,
		Users:           queries,
		Hooks:           hookProvider,
		Clock:           clockClock,
		URLs:            urlProvider,
		TemplateEngine:  engine,
		TaskQueue:       queueQueue,
		Interactions:    passwordFlow,
		LoginIDProvider: loginidProvider,
	}
	forgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProviderImpl,
		RenderProvider:   renderProviderImpl,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	resetPasswordSuccessHandler := &webapp2.ResetPasswordSuccessHandler{
		Provider:  forgotPasswordProvider,
		DBContext: context,
	}
	return resetPasswordSuccessHandler
}

func newWebAppSettingsHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	authenticationConfig := appConfig.Authentication
	uiConfig := appConfig.UI
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	identityConfig := appConfig.Identity
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	settingsHandler := &webapp2.SettingsHandler{
		RenderProvider: renderProviderImpl,
	}
	return settingsHandler
}

func newWebAppSettingsIdentityHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	authenticationConfig := appConfig.Authentication
	uiConfig := appConfig.UI
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	identityConfig := appConfig.Identity
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	oAuthSSOConfig := identityConfig.OAuth
	validateProviderImpl := &webapp.ValidateProviderImpl{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	redisContext := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: redisContext,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	jwtKeyMaterials := deps.ProvideJWTKeyMaterials(secretConfig)
	stateCodec := &sso.StateCodec{
		AppID:       appID,
		Credentials: jwtKeyMaterials,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	contextContext := appProvider.Context
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := &redis2.Store{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	interactionLogger := interaction.NewLogger(factory)
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordLogger := password.NewLogger(factory)
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: checker,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	request := p.Request
	endpointsProvider := &endpoints.Provider{
		Request: request,
		Config:  serverConfig,
	}
	oobProvider := &oob.Provider{
		Context:        contextContext,
		Localization:   localizationConfig,
		AppMetadata:    appMetadata,
		Messaging:      messagingConfig,
		Config:         authenticatorOOBConfig,
		Store:          oobStore,
		TemplateEngine: engine,
		Endpoints:      endpointsProvider,
		TaskQueue:      queueQueue,
		Clock:          clockClock,
	}
	bearertokenStore := &bearertoken.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorBearerTokenConfig := authenticatorConfig.BearerToken
	bearertokenProvider := &bearertoken.Provider{
		Store:  bearertokenStore,
		Config: authenticatorBearerTokenConfig,
		Clock:  clockClock,
	}
	recoverycodeStore := &recoverycode.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorRecoveryCodeConfig := authenticatorConfig.RecoveryCode
	recoverycodeProvider := &recoverycode.Provider{
		Store:  recoverycodeStore,
		Config: authenticatorRecoveryCodeConfig,
		Clock:  clockClock,
	}
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := &interaction.Provider{
		Store:         redisStore,
		Clock:         clockClock,
		Logger:        interactionLogger,
		Identity:      providerProvider,
		Authenticator: provider3,
		User:          userProvider,
		OOB:           oobProvider,
		Hooks:         hookProvider,
		Config:        authenticationConfig,
	}
	sessionConfig := appConfig.Session
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	redisLogger := redis4.NewLogger(factory)
	store2 := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	eventStore := &redis3.EventStore{
		Redis: redisContext,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store2,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	userController := &flows.UserController{
		Users:         userProvider,
		SessionCookie: cookieDef,
		Sessions:      sessionProvider,
		Hooks:         hookProvider,
		Clock:         clockClock,
	}
	webAppFlow := &flows.WebAppFlow{
		Config:         identityConfig,
		Identities:     providerProvider,
		Users:          userProvider,
		Hooks:          hookProvider,
		Interactions:   interactionProvider,
		UserController: userController,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	challengeProvider := &challenge.Provider{
		Redis: redisContext,
		AppID: appID,
		Clock: clockClock,
	}
	anonymousFlow := &flows.AnonymousFlow{
		Config:       authenticationConfig,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
		Anonymous: anonymousFlow,
		States:    stateStoreImpl,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ServerConfig:         serverConfig,
		SSOOAuthConfig:       oAuthSSOConfig,
		ValidateProvider:     validateProviderImpl,
		RenderProvider:       renderProviderImpl,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	settingsIdentityHandler := &webapp2.SettingsIdentityHandler{
		RenderProvider: renderProviderImpl,
		Provider:       authenticateProviderImpl,
		DBContext:      context,
	}
	return settingsIdentityHandler
}

func newWebAppLogoutHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	config := appProvider.Config
	appConfig := config.AppConfig
	authenticationConfig := appConfig.Authentication
	uiConfig := appConfig.UI
	localizationConfig := appConfig.Localization
	appMetadata := appConfig.Metadata
	engine := appProvider.TemplateEngine
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	checker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	identityConfig := appConfig.Identity
	store := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	loginidChecker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             store,
		Config:            loginIDConfig,
		Checker:           loginidChecker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	renderProviderImpl := &webapp.RenderProviderImpl{
		ServerConfig:                serverConfig,
		AuthenticationConfiguration: authenticationConfig,
		AuthUIConfiguration:         uiConfig,
		LocalizationConfiguration:   localizationConfig,
		MetadataConfiguration:       appMetadata,
		TemplateEngine:              engine,
		PasswordChecker:             checker,
		Identity:                    providerProvider,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	contextContext := appProvider.Context
	factory := appProvider.LoggerFactory
	logger := hook.NewLogger(factory)
	messagingConfig := appConfig.Messaging
	welcomeMessageConfig := appConfig.WelcomeMessage
	captureTaskContext := deps.ProvideCaptureTaskContext(config)
	inMemoryExecutor := rootProvider.TaskExecutor
	queueQueue := &queue.Queue{
		DBContext:      context,
		CaptureContext: captureTaskContext,
		Executor:       inMemoryExecutor,
	}
	welcomemessageProvider := &welcomemessage.Provider{
		Context:               contextContext,
		LocalizationConfig:    localizationConfig,
		MetadataConfiguration: appMetadata,
		MessagingConfig:       messagingConfig,
		WelcomeMessageConfig:  welcomeMessageConfig,
		TemplateEngine:        engine,
		TaskQueue:             queueQueue,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	mutatorFactory := &hook.MutatorFactory{
		Users: rawProvider,
	}
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:         hookConfig,
		Secret:         webhookKeyMaterials,
		Clock:          clockClock,
		MutatorFactory: mutatorFactory,
		SyncHTTP:       syncHTTPClient,
		AsyncHTTP:      asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   contextContext,
		Logger:    logger,
		DBContext: context,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	redisContext := appProvider.RedisContext
	redisLogger := redis4.NewLogger(factory)
	redisStore := &redis4.Store{
		Redis:  redisContext,
		AppID:  appID,
		Clock:  clockClock,
		Logger: redisLogger,
	}
	sessionConfig := appConfig.Session
	request := p.Request
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	manager := &session2.Manager{
		Store:     redisStore,
		Clock:     clockClock,
		Config:    sessionConfig,
		CookieDef: cookieDef,
	}
	logger2 := redis.NewLogger(factory)
	grantStore := &redis.GrantStore{
		Redis:       redisContext,
		AppID:       appID,
		Logger:      logger2,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	sessionManager := &oauth2.SessionManager{
		Store: grantStore,
		Clock: clockClock,
	}
	authSessionManager := &auth.SessionManager{
		Users:               queries,
		Hooks:               hookProvider,
		IDPSessions:         manager,
		AccessTokenSessions: sessionManager,
	}
	logoutHandler := &webapp2.LogoutHandler{
		ServerConfig:   serverConfig,
		RenderProvider: renderProviderImpl,
		SessionManager: authSessionManager,
		DBContext:      context,
	}
	return logoutHandler
}

// Injectors from wire_middleware.go:

func newSentryMiddleware(hub *sentry.Hub, p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	sentryMiddleware := &sentry2.Middleware{
		Hub:          hub,
		ServerConfig: serverConfig,
	}
	middlewareFunc := provideMiddlewareFunc(sentryMiddleware)
	return middlewareFunc
}

func newRecoverMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	recoveryLogger := middlewares.NewRecoveryLogger(factory)
	recoverMiddleware := &middlewares.RecoverMiddleware{
		Logger: recoveryLogger,
	}
	middlewareFunc := provideMiddlewareFunc(recoverMiddleware)
	return middlewareFunc
}

func newCORSMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	corsMiddleware := &middlewares.CORSMiddleware{
		Config: httpConfig,
	}
	middlewareFunc := provideMiddlewareFunc(corsMiddleware)
	return middlewareFunc
}

func newCSPMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	oAuthConfig := appConfig.OAuth
	cspMiddleware := &webapp.CSPMiddleware{
		Config: oAuthConfig,
	}
	middlewareFunc := provideMiddlewareFunc(cspMiddleware)
	return middlewareFunc
}

func newCSRFMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	config := appProvider.Config
	secretConfig := config.SecretConfig
	csrfKeyMaterials := deps.ProvideCSRFKeyMaterials(secretConfig)
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	csrfMiddleware := &webapp.CSRFMiddleware{
		Secret: csrfKeyMaterials,
		Config: serverConfig,
	}
	middlewareFunc := provideMiddlewareFunc(csrfMiddleware)
	return middlewareFunc
}

func newAuthEntryPointMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	authEntryPointMiddleware := &webapp.AuthEntryPointMiddleware{
		ServerConfig: serverConfig,
	}
	middlewareFunc := provideMiddlewareFunc(authEntryPointMiddleware)
	return middlewareFunc
}

func newSessionMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	request := p.Request
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	sessionConfig := appConfig.Session
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	cookieDef := session2.NewSessionCookieDef(request, sessionConfig, serverConfig)
	context := appProvider.RedisContext
	appID := appConfig.ID
	clockClock := _wireSystemClockValue
	factory := appProvider.LoggerFactory
	logger := redis4.NewLogger(factory)
	store := &redis4.Store{
		Redis:  context,
		AppID:  appID,
		Clock:  clockClock,
		Logger: logger,
	}
	eventStore := &redis3.EventStore{
		Redis: context,
		AppID: appID,
	}
	accessEventProvider := &auth.AccessEventProvider{
		Store: eventStore,
	}
	sessionRand := _wireRandValue
	sessionProvider := &session2.Provider{
		Request:      request,
		Store:        store,
		AccessEvents: accessEventProvider,
		ServerConfig: serverConfig,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       sessionRand,
	}
	resolver := &session2.Resolver{
		Cookie:   cookieDef,
		Provider: sessionProvider,
		Config:   serverConfig,
		Clock:    clockClock,
	}
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	dbContext := appProvider.DbContext
	sqlExecutor := db.SQLExecutor{
		Context: dbContext,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	redisLogger := redis.NewLogger(factory)
	grantStore := &redis.GrantStore{
		Redis:       context,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oauthResolver := &oauth2.Resolver{
		ServerConfig:   serverConfig,
		Authorizations: authorizationStore,
		AccessGrants:   grantStore,
		OfflineGrants:  grantStore,
		Sessions:       sessionProvider,
		Clock:          clockClock,
	}
	authAccessEventProvider := auth.AccessEventProvider{
		Store: eventStore,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	reservedNameChecker := rootProvider.ReservedNameChecker
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:              loginIDConfig,
		ReservedNameChecker: reservedNameChecker,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
	}
	providerProvider := &provider.Provider{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	queries := &user.Queries{
		Store:      userStore,
		Identities: providerProvider,
	}
	authMiddleware := &auth.Middleware{
		IDPSessionResolver:         resolver,
		AccessTokenSessionResolver: oauthResolver,
		AccessEvents:               authAccessEventProvider,
		Users:                      queries,
		DBContext:                  dbContext,
	}
	middlewareFunc := provideMiddlewareFunc(authMiddleware)
	return middlewareFunc
}

func newWebAppStateMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	context := appProvider.RedisContext
	stateStoreImpl := &webapp.StateStoreImpl{
		Redis: context,
	}
	stateMiddleware := &webapp.StateMiddleware{
		StateStore: stateStoreImpl,
	}
	middlewareFunc := provideMiddlewareFunc(stateMiddleware)
	return middlewareFunc
}

// Injectors from wire_task.go:

func newPwHousekeeperTask(p *deps.TaskProvider) task.Task {
	appProvider := p.AppProvider
	context := appProvider.DbContext
	factory := appProvider.LoggerFactory
	pwHousekeeperLogger := task2.NewPwHousekeeperLogger(factory)
	clockClock := _wireSystemClockValue
	config := appProvider.Config
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	sqlExecutor := db.SQLExecutor{
		Context: context,
	}
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	pwHousekeeperTask := &task2.PwHousekeeperTask{
		DBContext:     context,
		Logger:        pwHousekeeperLogger,
		PwHousekeeper: housekeeper,
	}
	return pwHousekeeperTask
}

func newSendMessagesTask(p *deps.TaskProvider) task.Task {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	localizationConfig := appConfig.Localization
	secretConfig := config.SecretConfig
	smtpServerCredentials := deps.ProvideSMTPServerCredentials(secretConfig)
	dialer := mail.NewGomailDialer(smtpServerCredentials)
	context := appProvider.Context
	sender := &mail.Sender{
		LocalizationConfiguration: localizationConfig,
		GomailDialer:              dialer,
		Context:                   context,
	}
	messagingConfig := appConfig.Messaging
	twilioCredentials := deps.ProvideTwilioCredentials(secretConfig)
	twilioClient := sms.NewTwilioClient(twilioCredentials)
	nexmoCredentials := deps.ProvideNexmoCredentials(secretConfig)
	nexmoClient := sms.NewNexmoClient(nexmoCredentials)
	client := &sms.Client{
		Context:            context,
		MessagingConfig:    messagingConfig,
		LocalizationConfig: localizationConfig,
		TwilioClient:       twilioClient,
		NexmoClient:        nexmoClient,
	}
	factory := appProvider.LoggerFactory
	sendMessagesLogger := task2.NewSendMessagesLogger(factory)
	sendMessagesTask := &task2.SendMessagesTask{
		EmailSender: sender,
		SMSClient:   client,
		Logger:      sendMessagesLogger,
	}
	return sendMessagesTask
}

// wire_middleware.go:

type middleware interface {
	Handle(next http.Handler) http.Handler
}

func provideMiddlewareFunc(m middleware) mux.MiddlewareFunc { return m.Handle }

var middlewareDependencySet = wire.NewSet(deps.RequestDependencySet, provideMiddlewareFunc)

func newSentryMiddlewareFactory(hub *sentry.Hub) func(*deps.RequestProvider) mux.MiddlewareFunc {
	return func(p *deps.RequestProvider) mux.MiddlewareFunc {
		return newSentryMiddleware(hub, p)
	}
}
