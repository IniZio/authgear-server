// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package server

import (
	"context"
	"github.com/authgear/authgear-server/pkg/lib/config/configsource"
	"github.com/authgear/authgear-server/pkg/lib/infra/db/global"
	"github.com/authgear/authgear-server/pkg/portal/deps"
	"github.com/authgear/authgear-server/pkg/util/clock"
)

// Injectors from wire.go:

func newConfigSourceController(p *deps.RootProvider, c context.Context) *configsource.Controller {
	config := p.ConfigSourceConfig
	factory := p.LoggerFactory
	localFSLogger := configsource.NewLocalFSLogger(factory)
	manager := p.AppBaseResources
	localFS := &configsource.LocalFS{
		Logger:        localFSLogger,
		BaseResources: manager,
		Config:        config,
	}
	kubernetesLogger := configsource.NewKubernetesLogger(factory)
	clock := _wireSystemClockValue
	environmentConfig := p.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	kubernetes := &configsource.Kubernetes{
		Logger:        kubernetesLogger,
		BaseResources: manager,
		Clock:         clock,
		TrustProxy:    trustProxy,
		Config:        config,
	}
	databaseLogger := configsource.NewDatabaseLogger(factory)
	databaseEnvironmentConfig := &environmentConfig.Database
	sqlBuilder := global.NewSQLBuilder(databaseEnvironmentConfig)
	pool := p.Database
	handle := global.NewHandle(c, pool, factory)
	sqlExecutor := global.NewSQLExecutor(c, handle)
	store := &configsource.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	database := &configsource.Database{
		Logger:        databaseLogger,
		BaseResources: manager,
		TrustProxy:    trustProxy,
		Config:        config,
		Store:         store,
		Database:      handle,
	}
	controller := configsource.NewController(config, localFS, kubernetes, database)
	return controller
}

var (
	_wireSystemClockValue = clock.NewSystemClock()
)
