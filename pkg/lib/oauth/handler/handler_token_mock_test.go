// Code generated by MockGen. DO NOT EDIT.
// Source: handler_token.go

// Package handler_test is a generated GoMock package.
package handler_test

import (
	reflect "reflect"

	event "github.com/authgear/authgear-server/pkg/api/event"
	app2app "github.com/authgear/authgear-server/pkg/lib/app2app"
	challenge "github.com/authgear/authgear-server/pkg/lib/authn/challenge"
	user "github.com/authgear/authgear-server/pkg/lib/authn/user"
	config "github.com/authgear/authgear-server/pkg/lib/config"
	oauth "github.com/authgear/authgear-server/pkg/lib/oauth"
	oidc "github.com/authgear/authgear-server/pkg/lib/oauth/oidc"
	gomock "github.com/golang/mock/gomock"
	jwk "github.com/lestrrat-go/jwx/v2/jwk"
)

// MockIDTokenIssuer is a mock of IDTokenIssuer interface.
type MockIDTokenIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockIDTokenIssuerMockRecorder
}

// MockIDTokenIssuerMockRecorder is the mock recorder for MockIDTokenIssuer.
type MockIDTokenIssuerMockRecorder struct {
	mock *MockIDTokenIssuer
}

// NewMockIDTokenIssuer creates a new mock instance.
func NewMockIDTokenIssuer(ctrl *gomock.Controller) *MockIDTokenIssuer {
	mock := &MockIDTokenIssuer{ctrl: ctrl}
	mock.recorder = &MockIDTokenIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDTokenIssuer) EXPECT() *MockIDTokenIssuerMockRecorder {
	return m.recorder
}

// IssueIDToken mocks base method.
func (m *MockIDTokenIssuer) IssueIDToken(opts oidc.IssueIDTokenOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueIDToken", opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueIDToken indicates an expected call of IssueIDToken.
func (mr *MockIDTokenIssuerMockRecorder) IssueIDToken(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueIDToken", reflect.TypeOf((*MockIDTokenIssuer)(nil).IssueIDToken), opts)
}

// MockAccessTokenIssuer is a mock of AccessTokenIssuer interface.
type MockAccessTokenIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenIssuerMockRecorder
}

// MockAccessTokenIssuerMockRecorder is the mock recorder for MockAccessTokenIssuer.
type MockAccessTokenIssuerMockRecorder struct {
	mock *MockAccessTokenIssuer
}

// NewMockAccessTokenIssuer creates a new mock instance.
func NewMockAccessTokenIssuer(ctrl *gomock.Controller) *MockAccessTokenIssuer {
	mock := &MockAccessTokenIssuer{ctrl: ctrl}
	mock.recorder = &MockAccessTokenIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenIssuer) EXPECT() *MockAccessTokenIssuerMockRecorder {
	return m.recorder
}

// EncodeAccessToken mocks base method.
func (m *MockAccessTokenIssuer) EncodeAccessToken(client *config.OAuthClientConfig, grant *oauth.AccessGrant, userID, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeAccessToken", client, grant, userID, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeAccessToken indicates an expected call of EncodeAccessToken.
func (mr *MockAccessTokenIssuerMockRecorder) EncodeAccessToken(client, grant, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeAccessToken", reflect.TypeOf((*MockAccessTokenIssuer)(nil).EncodeAccessToken), client, grant, userID, token)
}

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// DispatchEventOnCommit mocks base method.
func (m *MockEventService) DispatchEventOnCommit(payload event.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEventOnCommit", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchEventOnCommit indicates an expected call of DispatchEventOnCommit.
func (mr *MockEventServiceMockRecorder) DispatchEventOnCommit(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEventOnCommit", reflect.TypeOf((*MockEventService)(nil).DispatchEventOnCommit), payload)
}

// MockTokenHandlerUserFacade is a mock of TokenHandlerUserFacade interface.
type MockTokenHandlerUserFacade struct {
	ctrl     *gomock.Controller
	recorder *MockTokenHandlerUserFacadeMockRecorder
}

// MockTokenHandlerUserFacadeMockRecorder is the mock recorder for MockTokenHandlerUserFacade.
type MockTokenHandlerUserFacadeMockRecorder struct {
	mock *MockTokenHandlerUserFacade
}

// NewMockTokenHandlerUserFacade creates a new mock instance.
func NewMockTokenHandlerUserFacade(ctrl *gomock.Controller) *MockTokenHandlerUserFacade {
	mock := &MockTokenHandlerUserFacade{ctrl: ctrl}
	mock.recorder = &MockTokenHandlerUserFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenHandlerUserFacade) EXPECT() *MockTokenHandlerUserFacadeMockRecorder {
	return m.recorder
}

// GetRaw mocks base method.
func (m *MockTokenHandlerUserFacade) GetRaw(id string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockTokenHandlerUserFacadeMockRecorder) GetRaw(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockTokenHandlerUserFacade)(nil).GetRaw), id)
}

// MockApp2AppService is a mock of App2AppService interface.
type MockApp2AppService struct {
	ctrl     *gomock.Controller
	recorder *MockApp2AppServiceMockRecorder
}

// MockApp2AppServiceMockRecorder is the mock recorder for MockApp2AppService.
type MockApp2AppServiceMockRecorder struct {
	mock *MockApp2AppService
}

// NewMockApp2AppService creates a new mock instance.
func NewMockApp2AppService(ctrl *gomock.Controller) *MockApp2AppService {
	mock := &MockApp2AppService{ctrl: ctrl}
	mock.recorder = &MockApp2AppServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp2AppService) EXPECT() *MockApp2AppServiceMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockApp2AppService) ParseToken(requestJWT string, key jwk.Key) (*app2app.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", requestJWT, key)
	ret0, _ := ret[0].(*app2app.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockApp2AppServiceMockRecorder) ParseToken(requestJWT, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockApp2AppService)(nil).ParseToken), requestJWT, key)
}

// ParseTokenUnverified mocks base method.
func (m *MockApp2AppService) ParseTokenUnverified(requestJWT string) (*app2app.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTokenUnverified", requestJWT)
	ret0, _ := ret[0].(*app2app.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTokenUnverified indicates an expected call of ParseTokenUnverified.
func (mr *MockApp2AppServiceMockRecorder) ParseTokenUnverified(requestJWT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTokenUnverified", reflect.TypeOf((*MockApp2AppService)(nil).ParseTokenUnverified), requestJWT)
}

// MockChallengeProvider is a mock of ChallengeProvider interface.
type MockChallengeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChallengeProviderMockRecorder
}

// MockChallengeProviderMockRecorder is the mock recorder for MockChallengeProvider.
type MockChallengeProviderMockRecorder struct {
	mock *MockChallengeProvider
}

// NewMockChallengeProvider creates a new mock instance.
func NewMockChallengeProvider(ctrl *gomock.Controller) *MockChallengeProvider {
	mock := &MockChallengeProvider{ctrl: ctrl}
	mock.recorder = &MockChallengeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengeProvider) EXPECT() *MockChallengeProviderMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockChallengeProvider) Consume(token string) (*challenge.Purpose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", token)
	ret0, _ := ret[0].(*challenge.Purpose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockChallengeProviderMockRecorder) Consume(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockChallengeProvider)(nil).Consume), token)
}
