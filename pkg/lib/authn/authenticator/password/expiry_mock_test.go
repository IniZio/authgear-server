// Code generated by MockGen. DO NOT EDIT.
// Source: expiry.go

// Package password is a generated GoMock package.
package password

import (
	reflect "reflect"

	authenticator "github.com/authgear/authgear-server/pkg/lib/authn/authenticator"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticatorStore is a mock of AuthenticatorStore interface.
type MockAuthenticatorStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorStoreMockRecorder
}

// MockAuthenticatorStoreMockRecorder is the mock recorder for MockAuthenticatorStore.
type MockAuthenticatorStoreMockRecorder struct {
	mock *MockAuthenticatorStore
}

// NewMockAuthenticatorStore creates a new mock instance.
func NewMockAuthenticatorStore(ctrl *gomock.Controller) *MockAuthenticatorStore {
	mock := &MockAuthenticatorStore{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatorStore) EXPECT() *MockAuthenticatorStoreMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockAuthenticatorStore) List(userID string) ([]*authenticator.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", userID)
	ret0, _ := ret[0].([]*authenticator.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAuthenticatorStoreMockRecorder) List(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAuthenticatorStore)(nil).List), userID)
}
