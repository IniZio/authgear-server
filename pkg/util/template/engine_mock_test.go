// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go

// Package template is a generated GoMock package.
package template

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTemplateResolver is a mock of TemplateResolver interface
type MockTemplateResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateResolverMockRecorder
}

// MockTemplateResolverMockRecorder is the mock recorder for MockTemplateResolver
type MockTemplateResolverMockRecorder struct {
	mock *MockTemplateResolver
}

// NewMockTemplateResolver creates a new mock instance
func NewMockTemplateResolver(ctrl *gomock.Controller) *MockTemplateResolver {
	mock := &MockTemplateResolver{ctrl: ctrl}
	mock.recorder = &MockTemplateResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateResolver) EXPECT() *MockTemplateResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockTemplateResolver) Resolve(ctx *ResolveContext, typ string) (*Resolved, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, typ)
	ret0, _ := ret[0].(*Resolved)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockTemplateResolverMockRecorder) Resolve(ctx, typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockTemplateResolver)(nil).Resolve), ctx, typ)
}

// ResolveTranslations mocks base method
func (m *MockTemplateResolver) ResolveTranslations(ctx *ResolveContext, typ string) (map[string]Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveTranslations", ctx, typ)
	ret0, _ := ret[0].(map[string]Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveTranslations indicates an expected call of ResolveTranslations
func (mr *MockTemplateResolverMockRecorder) ResolveTranslations(ctx, typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTranslations", reflect.TypeOf((*MockTemplateResolver)(nil).ResolveTranslations), ctx, typ)
}
