// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package auth

import (
	"github.com/authgear/authgear-server/pkg/auth/handler/oauth"
	webapp2 "github.com/authgear/authgear-server/pkg/auth/handler/webapp"
	"github.com/authgear/authgear-server/pkg/auth/handler/webapp/viewmodels"
	"github.com/authgear/authgear-server/pkg/auth/webapp"
	"github.com/authgear/authgear-server/pkg/lib/authn/authenticator/oob"
	"github.com/authgear/authgear-server/pkg/lib/authn/authenticator/password"
	service2 "github.com/authgear/authgear-server/pkg/lib/authn/authenticator/service"
	"github.com/authgear/authgear-server/pkg/lib/authn/authenticator/totp"
	"github.com/authgear/authgear-server/pkg/lib/authn/challenge"
	"github.com/authgear/authgear-server/pkg/lib/authn/identity/anonymous"
	"github.com/authgear/authgear-server/pkg/lib/authn/identity/loginid"
	oauth3 "github.com/authgear/authgear-server/pkg/lib/authn/identity/oauth"
	"github.com/authgear/authgear-server/pkg/lib/authn/identity/service"
	"github.com/authgear/authgear-server/pkg/lib/authn/mfa"
	"github.com/authgear/authgear-server/pkg/lib/authn/otp"
	"github.com/authgear/authgear-server/pkg/lib/authn/sso"
	"github.com/authgear/authgear-server/pkg/lib/authn/user"
	"github.com/authgear/authgear-server/pkg/lib/deps"
	"github.com/authgear/authgear-server/pkg/lib/facade"
	"github.com/authgear/authgear-server/pkg/lib/feature/forgotpassword"
	"github.com/authgear/authgear-server/pkg/lib/feature/verification"
	"github.com/authgear/authgear-server/pkg/lib/feature/welcomemessage"
	"github.com/authgear/authgear-server/pkg/lib/hook"
	"github.com/authgear/authgear-server/pkg/lib/infra/db"
	"github.com/authgear/authgear-server/pkg/lib/infra/middleware"
	"github.com/authgear/authgear-server/pkg/lib/interaction"
	oauth2 "github.com/authgear/authgear-server/pkg/lib/oauth"
	"github.com/authgear/authgear-server/pkg/lib/oauth/handler"
	"github.com/authgear/authgear-server/pkg/lib/oauth/oidc"
	handler2 "github.com/authgear/authgear-server/pkg/lib/oauth/oidc/handler"
	"github.com/authgear/authgear-server/pkg/lib/oauth/pq"
	"github.com/authgear/authgear-server/pkg/lib/oauth/redis"
	"github.com/authgear/authgear-server/pkg/lib/ratelimit"
	"github.com/authgear/authgear-server/pkg/lib/session"
	"github.com/authgear/authgear-server/pkg/lib/session/access"
	"github.com/authgear/authgear-server/pkg/lib/session/idpsession"
	"github.com/authgear/authgear-server/pkg/lib/translation"
	"github.com/authgear/authgear-server/pkg/lib/web"
	"github.com/authgear/authgear-server/pkg/util/clock"
	"github.com/authgear/authgear-server/pkg/util/httproute"
	"github.com/authgear/authgear-server/pkg/util/httputil"
	"github.com/authgear/authgear-server/pkg/util/rand"
	"github.com/authgear/authgear-server/pkg/util/template"
	"net/http"
)

// Injectors from wire_handler.go:

func newOAuthAuthorizeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	authorizeHandlerLogger := oauth.NewAuthorizeHandlerLogger(factory)
	handle := appProvider.Database
	request := p.Request
	context := deps.ProvideRequestContext(request)
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	authorizationHandlerLogger := handler.NewAuthorizationHandlerLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	redisHandle := appProvider.Redis
	logger := redis.NewLogger(factory)
	clock := _wireSystemClockValue
	grantStore := &redis.GrantStore{
		Redis:       redisHandle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clock,
	}
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	urlProvider := &oauth2.URLProvider{
		Endpoints: endpointsProvider,
	}
	store := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	provider := &anonymous.Provider{
		Store: store,
		Clock: clock,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	interactionLogger := interaction.NewLogger(factory)
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          serviceStore,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      provider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	webappURLProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              webappURLProvider,
		Clock:                    clock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clock,
		URLs:           webappURLProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       webappURLProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	rand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clock,
		Random:       rand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      provider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  interactionLogger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	authenticateURLProvider := &webapp.AuthenticateURLProvider{
		Endpoints: endpointsProvider,
		Anonymous: provider,
		Pages:     webappService,
	}
	scopesValidator := _wireScopesValidatorValue
	tokenGenerator := _wireTokenGeneratorValue
	authorizationHandler := &handler.AuthorizationHandler{
		Context:        context,
		AppID:          appID,
		Config:         oAuthConfig,
		Logger:         authorizationHandlerLogger,
		Authorizations: authorizationStore,
		CodeGrants:     grantStore,
		OAuthURLs:      urlProvider,
		WebAppURLs:     authenticateURLProvider,
		ValidateScopes: scopesValidator,
		CodeGenerator:  tokenGenerator,
		Clock:          clock,
	}
	authorizeHandler := &oauth.AuthorizeHandler{
		Logger:       authorizeHandlerLogger,
		Database:     handle,
		AuthzHandler: authorizationHandler,
	}
	return authorizeHandler
}

var (
	_wireSystemClockValue     = clock.NewSystemClock()
	_wireRandValue            = idpsession.Rand(rand.SecureRand)
	_wireScopesValidatorValue = handler.ScopesValidator(oidc.ValidateScopes)
	_wireTokenGeneratorValue  = handler.TokenGenerator(oauth2.GenerateToken)
)

func newOAuthTokenHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	tokenHandlerLogger := oauth.NewTokenHandlerLogger(factory)
	handle := appProvider.Database
	request := p.Request
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	oAuthConfig := appConfig.OAuth
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	handlerTokenHandlerLogger := handler.NewTokenHandlerLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := deps.ProvideRequestContext(request)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	redisHandle := appProvider.Redis
	logger := redis.NewLogger(factory)
	clockClock := _wireSystemClockValue
	grantStore := &redis.GrantStore{
		Redis:       redisHandle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	storeRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	provider := &idpsession.Provider{
		Request:      request,
		Store:        storeRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	interactionLogger := interaction.NewLogger(factory)
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 provider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  interactionLogger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	oidcKeyMaterials := deps.ProvideOIDCKeyMaterials(secretConfig)
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets:   oidcKeyMaterials,
		Endpoints: endpointsProvider,
		Users:     queries,
		Clock:     clockClock,
	}
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := &handler.TokenHandler{
		Request:        request,
		AppID:          appID,
		Config:         oAuthConfig,
		TrustProxy:     trustProxy,
		Logger:         handlerTokenHandlerLogger,
		Authorizations: authorizationStore,
		CodeGrants:     grantStore,
		OfflineGrants:  grantStore,
		AccessGrants:   grantStore,
		AccessEvents:   eventProvider,
		Sessions:       provider,
		Graphs:         interactionService,
		IDTokenIssuer:  idTokenIssuer,
		GenerateToken:  tokenGenerator,
		Clock:          clockClock,
	}
	oauthTokenHandler := &oauth.TokenHandler{
		Logger:       tokenHandlerLogger,
		Database:     handle,
		TokenHandler: tokenHandler,
	}
	return oauthTokenHandler
}

func newOAuthRevokeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	revokeHandlerLogger := oauth.NewRevokeHandlerLogger(factory)
	handle := appProvider.Database
	redisHandle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	logger := redis.NewLogger(factory)
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	request := p.Request
	context := deps.ProvideRequestContext(request)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	grantStore := &redis.GrantStore{
		Redis:       redisHandle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	revokeHandler := &handler.RevokeHandler{
		OfflineGrants: grantStore,
		AccessGrants:  grantStore,
	}
	oauthRevokeHandler := &oauth.RevokeHandler{
		Logger:        revokeHandlerLogger,
		Database:      handle,
		RevokeHandler: revokeHandler,
	}
	return oauthRevokeHandler
}

func newOAuthMetadataHandler(p *deps.RequestProvider) http.Handler {
	request := p.Request
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	metadataProvider := &oauth2.MetadataProvider{
		Endpoints: endpointsProvider,
	}
	oidcMetadataProvider := &oidc.MetadataProvider{
		Endpoints: endpointsProvider,
	}
	v := ProvideOAuthMetadataProviders(metadataProvider, oidcMetadataProvider)
	metadataHandler := &oauth.MetadataHandler{
		Providers: v,
	}
	return metadataHandler
}

func newOAuthJWKSHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	jwksHandlerLogger := oauth.NewJWKSHandlerLogger(factory)
	config := appProvider.Config
	secretConfig := config.SecretConfig
	oidcKeyMaterials := deps.ProvideOIDCKeyMaterials(secretConfig)
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := deps.ProvideRequestContext(request)
	handle := appProvider.Database
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	clockClock := _wireSystemClockValue
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          serviceStore,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	logger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          logger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	redisHandle := appProvider.Redis
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		Store:        store,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets:   oidcKeyMaterials,
		Endpoints: endpointsProvider,
		Users:     queries,
		Clock:     clockClock,
	}
	jwksHandler := &oauth.JWKSHandler{
		Logger: jwksHandlerLogger,
		JWKS:   idTokenIssuer,
	}
	return jwksHandler
}

func newOAuthUserInfoHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	userInfoHandlerLogger := oauth.NewUserInfoHandlerLogger(factory)
	handle := appProvider.Database
	config := appProvider.Config
	secretConfig := config.SecretConfig
	oidcKeyMaterials := deps.ProvideOIDCKeyMaterials(secretConfig)
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := deps.ProvideRequestContext(request)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	clockClock := _wireSystemClockValue
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          serviceStore,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	logger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          logger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	redisHandle := appProvider.Redis
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		Store:        store,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	idTokenIssuer := &oidc.IDTokenIssuer{
		Secrets:   oidcKeyMaterials,
		Endpoints: endpointsProvider,
		Users:     queries,
		Clock:     clockClock,
	}
	userInfoHandler := &oauth.UserInfoHandler{
		Logger:           userInfoHandlerLogger,
		Database:         handle,
		UserInfoProvider: idTokenIssuer,
	}
	return userInfoHandler
}

func newOAuthEndSessionHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	endSessionHandlerLogger := oauth.NewEndSessionHandlerLogger(factory)
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	oAuthConfig := appConfig.OAuth
	request := p.Request
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	endSessionHandler := &handler2.EndSessionHandler{
		Config:    oAuthConfig,
		Endpoints: endpointsProvider,
		URLs:      urlProvider,
	}
	oauthEndSessionHandler := &oauth.EndSessionHandler{
		Logger:            endSessionHandlerLogger,
		Database:          handle,
		EndSessionHandler: endSessionHandler,
	}
	return oauthEndSessionHandler
}

func newOAuthChallengeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Redis
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	clockClock := _wireSystemClockValue
	provider := &challenge.Provider{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	factory := appProvider.LoggerFactory
	jsonResponseWriterLogger := httputil.NewJSONResponseWriterLogger(factory)
	jsonResponseWriter := &httputil.JSONResponseWriter{
		Logger: jsonResponseWriterLogger,
	}
	challengeHandler := &oauth.ChallengeHandler{
		Challenges: provider,
		JSON:       jsonResponseWriter,
	}
	return challengeHandler
}

func newWebAppRootHandler(p *deps.RequestProvider) http.Handler {
	rootHandler := &webapp2.RootHandler{}
	return rootHandler
}

func newWebAppLoginHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	loginHandler := &webapp2.LoginHandler{
		TrustProxy:    trustProxy,
		Database:      handle,
		BaseViewModel: baseViewModeler,
		FormPrefiller: formPrefiller,
		Renderer:      responseRenderer,
		WebApp:        webappService,
		CSRFCookie:    csrfCookieDef,
	}
	return loginHandler
}

func newWebAppSignupHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	signupHandler := &webapp2.SignupHandler{
		TrustProxy:    trustProxy,
		Database:      handle,
		BaseViewModel: baseViewModeler,
		FormPrefiller: formPrefiller,
		Renderer:      responseRenderer,
		WebApp:        webappService,
		CSRFCookie:    csrfCookieDef,
	}
	return signupHandler
}

func newWebAppPromoteHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	promoteHandler := &webapp2.PromoteHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		FormPrefiller: formPrefiller,
		Renderer:      responseRenderer,
		WebApp:        webappService,
		CSRFCookie:    csrfCookieDef,
	}
	return promoteHandler
}

func newWebAppSSOCallbackHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	factory := appProvider.LoggerFactory
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	context := deps.ProvideRequestContext(request)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	ssoCallbackHandler := &webapp2.SSOCallbackHandler{
		Database:   handle,
		WebApp:     webappService,
		CSRFCookie: csrfCookieDef,
	}
	return ssoCallbackHandler
}

func newWebAppEnterLoginIDHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	enterLoginIDHandler := &webapp2.EnterLoginIDHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return enterLoginIDHandler
}

func newWebAppEnterPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	enterPasswordHandler := &webapp2.EnterPasswordHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return enterPasswordHandler
}

func newWebAppCreatePasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	createPasswordHandler := &webapp2.CreatePasswordHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		PasswordPolicy: passwordChecker,
	}
	return createPasswordHandler
}

func newWebAppSetupTOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	setupTOTPHandler := &webapp2.SetupTOTPHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
		Clock:         clockClock,
		Endpoints:     endpointsProvider,
	}
	return setupTOTPHandler
}

func newWebAppEnterTOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	enterTOTPHandler := &webapp2.EnterTOTPHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return enterTOTPHandler
}

func newWebAppSetupOOBOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	setupOOBOTPHandler := &webapp2.SetupOOBOTPHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return setupOOBOTPHandler
}

func newWebAppEnterOOBOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	enterOOBOTPHandler := &webapp2.EnterOOBOTPHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return enterOOBOTPHandler
}

func newWebAppEnterRecoveryCodeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	enterRecoveryCodeHandler := &webapp2.EnterRecoveryCodeHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return enterRecoveryCodeHandler
}

func newWebAppSetupRecoveryCodeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	setupRecoveryCodeHandler := &webapp2.SetupRecoveryCodeHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return setupRecoveryCodeHandler
}

func newWebAppVerifyIdentityHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	verifyIdentityHandler := &webapp2.VerifyIdentityHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return verifyIdentityHandler
}

func newWebAppVerifyIdentitySuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	verifyIdentitySuccessHandler := &webapp2.VerifyIdentitySuccessHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return verifyIdentitySuccessHandler
}

func newWebAppForgotPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	identityConfig := appConfig.Identity
	loginIDConfig := identityConfig.LoginID
	formPrefiller := &webapp2.FormPrefiller{
		LoginID: loginIDConfig,
		UI:      uiConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	forgotPasswordHandler := &webapp2.ForgotPasswordHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		FormPrefiller: formPrefiller,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return forgotPasswordHandler
}

func newWebAppForgotPasswordSuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	forgotPasswordSuccessHandler := &webapp2.ForgotPasswordSuccessHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return forgotPasswordSuccessHandler
}

func newWebAppResetPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	resetPasswordHandler := &webapp2.ResetPasswordHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		PasswordPolicy: passwordChecker,
	}
	return resetPasswordHandler
}

func newWebAppResetPasswordSuccessHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	resetPasswordSuccessHandler := &webapp2.ResetPasswordSuccessHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
	}
	return resetPasswordSuccessHandler
}

func newWebAppSettingsHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	settingsHandler := &webapp2.SettingsHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		Authentication: authenticationConfig,
		Authenticators: service3,
		MFA:            mfaService,
	}
	return settingsHandler
}

func newWebAppSettingsIdentityHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	settingsIdentityHandler := &webapp2.SettingsIdentityHandler{
		Database:      handle,
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
		WebApp:        webappService,
		Identities:    serviceService,
		Verification:  verificationService,
		CSRFCookie:    csrfCookieDef,
	}
	return settingsIdentityHandler
}

func newWebAppSettingsTOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	settingsTOTPHandler := &webapp2.SettingsTOTPHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		Authenticators: service3,
		CSRFCookie:     csrfCookieDef,
	}
	return settingsTOTPHandler
}

func newWebAppSettingsOOBOTPHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	settingsOOBOTPHandler := &webapp2.SettingsOOBOTPHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		Authenticators: service3,
		CSRFCookie:     csrfCookieDef,
	}
	return settingsOOBOTPHandler
}

func newWebAppSettingsRecoveryCodeHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	settingsRecoveryCodeHandler := &webapp2.SettingsRecoveryCodeHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		Authentication: authenticationConfig,
		MFA:            mfaService,
		CSRFCookie:     csrfCookieDef,
	}
	return settingsRecoveryCodeHandler
}

func newWebAppChangePasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	changePasswordHandler := &webapp2.ChangePasswordHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		PasswordPolicy: passwordChecker,
	}
	return changePasswordHandler
}

func newWebAppChangeSecondaryPasswordHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	serviceLogger := webapp.NewServiceLogger(factory)
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	trustProxy := environmentConfig.TrustProxy
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	changeSecondaryPasswordHandler := &webapp2.ChangeSecondaryPasswordHandler{
		Database:       handle,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
		WebApp:         webappService,
		PasswordPolicy: passwordChecker,
	}
	return changeSecondaryPasswordHandler
}

func newWebAppLogoutHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	config := appProvider.Config
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	appConfig := config.AppConfig
	appID := appConfig.ID
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	request := p.Request
	context := deps.ProvideRequestContext(request)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	clockClock := _wireSystemClockValue
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          serviceStore,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	factory := appProvider.LoggerFactory
	logger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          logger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	redisHandle := appProvider.Redis
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		Store:        store,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	hookLogger := hook.NewLogger(factory)
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	queue := appProvider.TaskQueue
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	rawCommands := &user.RawCommands{
		Store:                  store,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	sessionConfig := appConfig.Session
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	idpsessionManager := &idpsession.Manager{
		Store:         idpsessionStoreRedis,
		Clock:         clockClock,
		Config:        sessionConfig,
		CookieFactory: cookieFactory,
		CookieDef:     cookieDef,
	}
	redisLogger := redis.NewLogger(factory)
	grantStore := &redis.GrantStore{
		Redis:       redisHandle,
		AppID:       appID,
		Logger:      redisLogger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	sessionManager := &oauth2.SessionManager{
		Store: grantStore,
		Clock: clockClock,
	}
	manager2 := &session.Manager{
		Users:               queries,
		Hooks:               hookProvider,
		IDPSessions:         idpsessionManager,
		AccessTokenSessions: sessionManager,
	}
	uiConfig := appConfig.UI
	forgotPasswordConfig := appConfig.ForgotPassword
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	logoutHandler := &webapp2.LogoutHandler{
		Database:       handle,
		TrustProxy:     trustProxy,
		SessionManager: manager2,
		BaseViewModel:  baseViewModeler,
		Renderer:       responseRenderer,
	}
	return logoutHandler
}

func newWebAppAuthenticationBeginHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	factory := appProvider.LoggerFactory
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	context := deps.ProvideRequestContext(request)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	authenticationBeginHandler := &webapp2.AuthenticationBeginHandler{
		Database:             handle,
		WebApp:               webappService,
		MFADeviceTokenCookie: mfaCookieDef,
	}
	return authenticationBeginHandler
}

func newWebAppCreateAuthenticatorBeginHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	handle := appProvider.Database
	factory := appProvider.LoggerFactory
	serviceLogger := webapp.NewServiceLogger(factory)
	request := p.Request
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	redisHandle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: redisHandle,
	}
	logger := interaction.NewLogger(factory)
	context := deps.ProvideRequestContext(request)
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: handle,
	}
	clockClock := _wireSystemClockValue
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: redisHandle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: redisHandle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: redisHandle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  handle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  redisHandle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: redisHandle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	webappCookieDef := webapp.NewUATokenCookieDef(httpConfig)
	webappService := &webapp.Service{
		Logger:        serviceLogger,
		Request:       request,
		Store:         redisStore,
		Graph:         interactionService,
		CookieFactory: cookieFactory,
		UATokenCookie: webappCookieDef,
	}
	createAuthenticatorBeginHandler := &webapp2.CreateAuthenticatorBeginHandler{
		Database: handle,
		WebApp:   webappService,
	}
	return createAuthenticatorBeginHandler
}

func newWebAppStaticAssetsHandler(p *deps.RequestProvider) http.Handler {
	appProvider := p.AppProvider
	manager := appProvider.Resources
	staticAssetsHandler := &webapp2.StaticAssetsHandler{
		Resources: manager,
	}
	return staticAssetsHandler
}

// Injectors from wire_middleware.go:

func newSentryMiddleware(p *deps.RootProvider) httproute.Middleware {
	hub := p.SentryHub
	environmentConfig := p.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	sentryMiddleware := &middleware.SentryMiddleware{
		SentryHub:  hub,
		TrustProxy: trustProxy,
	}
	return sentryMiddleware
}

func newBodyLimitMiddleware(p *deps.RootProvider) httproute.Middleware {
	bodyLimitMiddleware := &middleware.BodyLimitMiddleware{}
	return bodyLimitMiddleware
}

func newPanicEndMiddleware(p *deps.RootProvider) httproute.Middleware {
	panicEndMiddleware := &middleware.PanicEndMiddleware{}
	return panicEndMiddleware
}

func newPanicWriteEmptyResponseMiddleware(p *deps.RequestProvider) httproute.Middleware {
	panicWriteEmptyResponseMiddleware := &middleware.PanicWriteEmptyResponseMiddleware{}
	return panicWriteEmptyResponseMiddleware
}

func newPanicLogMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	factory := appProvider.LoggerFactory
	panicLogMiddlewareLogger := middleware.NewPanicLogMiddlewareLogger(factory)
	panicLogMiddleware := &middleware.PanicLogMiddleware{
		Logger: panicLogMiddlewareLogger,
	}
	return panicLogMiddleware
}

func newPanicAPIMiddleware(p *deps.RequestProvider) httproute.Middleware {
	panicWriteAPIResponseMiddleware := &middleware.PanicWriteAPIResponseMiddleware{}
	return panicWriteAPIResponseMiddleware
}

func newPanicWebAppMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	uiConfig := appConfig.UI
	request := p.Request
	context := deps.ProvideRequestContext(request)
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	manager := appProvider.Resources
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	authenticationConfig := appConfig.Authentication
	baseViewModeler := &viewmodels.BaseViewModeler{
		AuthUI:         uiConfig,
		StaticAssets:   staticAssetResolver,
		ForgotPassword: forgotPasswordConfig,
		Authentication: authenticationConfig,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	factory := appProvider.LoggerFactory
	responseRendererLogger := webapp2.NewResponseRendererLogger(factory)
	responseRenderer := &webapp2.ResponseRenderer{
		TemplateEngine: engine,
		Logger:         responseRendererLogger,
	}
	panicMiddleware := &webapp2.PanicMiddleware{
		BaseViewModel: baseViewModeler,
		Renderer:      responseRenderer,
	}
	return panicMiddleware
}

func newCORSMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	corsMiddleware := &middleware.CORSMiddleware{
		Config: httpConfig,
	}
	return corsMiddleware
}

func newCSPMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	oAuthConfig := appConfig.OAuth
	cspMiddleware := &webapp.CSPMiddleware{
		Config: oAuthConfig,
	}
	return cspMiddleware
}

func newCSRFMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	secretConfig := config.SecretConfig
	csrfKeyMaterials := deps.ProvideCSRFKeyMaterials(secretConfig)
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	csrfCookieDef := webapp.NewCSRFCookieDef(httpConfig)
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	csrfMiddleware := &webapp.CSRFMiddleware{
		Secret:     csrfKeyMaterials,
		Cookie:     csrfCookieDef,
		TrustProxy: trustProxy,
	}
	return csrfMiddleware
}

func newAuthEntryPointMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	authEntryPointMiddleware := &webapp.AuthEntryPointMiddleware{
		TrustProxy: trustProxy,
	}
	return authEntryPointMiddleware
}

func newSessionMiddleware(p *deps.RequestProvider) httproute.Middleware {
	request := p.Request
	appProvider := p.AppProvider
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	config := appProvider.Config
	appConfig := config.AppConfig
	httpConfig := appConfig.HTTP
	sessionConfig := appConfig.Session
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	handle := appProvider.Redis
	appID := appConfig.ID
	clockClock := _wireSystemClockValue
	factory := appProvider.LoggerFactory
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	storeRedis := &idpsession.StoreRedis{
		Redis:  handle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: handle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	idpsessionRand := _wireRandValue
	provider := &idpsession.Provider{
		Request:      request,
		Store:        storeRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	resolver := &idpsession.Resolver{
		CookieFactory: cookieFactory,
		Cookie:        cookieDef,
		Provider:      provider,
		TrustProxy:    trustProxy,
		Clock:         clockClock,
	}
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	context := deps.ProvideRequestContext(request)
	dbHandle := appProvider.Database
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: dbHandle,
	}
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	logger := redis.NewLogger(factory)
	grantStore := &redis.GrantStore{
		Redis:       handle,
		AppID:       appID,
		Logger:      logger,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
		Clock:       clockClock,
	}
	oauthResolver := &oauth2.Resolver{
		TrustProxy:     trustProxy,
		Authorizations: authorizationStore,
		AccessGrants:   grantStore,
		OfflineGrants:  grantStore,
		Sessions:       provider,
		Clock:          clockClock,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	serviceStore := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	loginidProvider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          serviceStore,
		LoginID:        loginidProvider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	store2 := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: handle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       store2,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	verificationStoreRedis := &verification.StoreRedis{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   verificationStoreRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	queries := &user.Queries{
		Store:        store,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	sessionMiddleware := &session.Middleware{
		IDPSessionResolver:         resolver,
		AccessTokenSessionResolver: oauthResolver,
		AccessEvents:               eventProvider,
		Users:                      queries,
		Database:                   dbHandle,
	}
	return sessionMiddleware
}

func newWebAppStateMiddleware(p *deps.RequestProvider) httproute.Middleware {
	appProvider := p.AppProvider
	config := appProvider.Config
	appConfig := config.AppConfig
	appID := appConfig.ID
	handle := appProvider.Redis
	redisStore := &webapp.RedisStore{
		AppID: appID,
		Redis: handle,
	}
	factory := appProvider.LoggerFactory
	logger := interaction.NewLogger(factory)
	request := p.Request
	context := deps.ProvideRequestContext(request)
	dbHandle := appProvider.Database
	sqlExecutor := db.SQLExecutor{
		Context:  context,
		Database: dbHandle,
	}
	clockClock := _wireSystemClockValue
	rootProvider := appProvider.RootProvider
	environmentConfig := rootProvider.EnvironmentConfig
	trustProxy := environmentConfig.TrustProxy
	authenticationConfig := appConfig.Authentication
	identityConfig := appConfig.Identity
	secretConfig := config.SecretConfig
	databaseCredentials := deps.ProvideDatabaseCredentials(secretConfig)
	sqlBuilder := db.ProvideSQLBuilder(databaseCredentials, appID)
	store := &service.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginidStore := &loginid.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	loginIDConfig := identityConfig.LoginID
	manager := appProvider.Resources
	typeCheckerFactory := &loginid.TypeCheckerFactory{
		Config:    loginIDConfig,
		Resources: manager,
	}
	checker := &loginid.Checker{
		Config:             loginIDConfig,
		TypeCheckerFactory: typeCheckerFactory,
	}
	normalizerFactory := &loginid.NormalizerFactory{
		Config: loginIDConfig,
	}
	provider := &loginid.Provider{
		Store:             loginidStore,
		Config:            loginIDConfig,
		Checker:           checker,
		NormalizerFactory: normalizerFactory,
		Clock:             clockClock,
	}
	oauthStore := &oauth3.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oauthProvider := &oauth3.Provider{
		Store: oauthStore,
		Clock: clockClock,
	}
	anonymousStore := &anonymous.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	anonymousProvider := &anonymous.Provider{
		Store: anonymousStore,
		Clock: clockClock,
	}
	serviceService := &service.Service{
		Authentication: authenticationConfig,
		Identity:       identityConfig,
		Store:          store,
		LoginID:        provider,
		OAuth:          oauthProvider,
		Anonymous:      anonymousProvider,
	}
	serviceStore := &service2.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordStore := &password.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorConfig := appConfig.Authenticator
	authenticatorPasswordConfig := authenticatorConfig.Password
	passwordLogger := password.NewLogger(factory)
	historyStore := &password.HistoryStore{
		Clock:       clockClock,
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	passwordChecker := password.ProvideChecker(authenticatorPasswordConfig, historyStore)
	housekeeperLogger := password.NewHousekeeperLogger(factory)
	housekeeper := &password.Housekeeper{
		Store:  historyStore,
		Logger: housekeeperLogger,
		Config: authenticatorPasswordConfig,
	}
	passwordProvider := &password.Provider{
		Store:           passwordStore,
		Config:          authenticatorPasswordConfig,
		Clock:           clockClock,
		Logger:          passwordLogger,
		PasswordHistory: historyStore,
		PasswordChecker: passwordChecker,
		Housekeeper:     housekeeper,
	}
	totpStore := &totp.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	authenticatorTOTPConfig := authenticatorConfig.TOTP
	totpProvider := &totp.Provider{
		Store:  totpStore,
		Config: authenticatorTOTPConfig,
		Clock:  clockClock,
	}
	authenticatorOOBConfig := authenticatorConfig.OOB
	oobStore := &oob.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	oobProvider := &oob.Provider{
		Config: authenticatorOOBConfig,
		Store:  oobStore,
		Clock:  clockClock,
	}
	ratelimitLogger := ratelimit.NewLogger(factory)
	storageRedis := &ratelimit.StorageRedis{
		AppID: appID,
		Redis: handle,
	}
	limiter := &ratelimit.Limiter{
		Logger:  ratelimitLogger,
		Storage: storageRedis,
		Clock:   clockClock,
	}
	service3 := &service2.Service{
		Store:       serviceStore,
		Password:    passwordProvider,
		TOTP:        totpProvider,
		OOBOTP:      oobProvider,
		RateLimiter: limiter,
	}
	verificationLogger := verification.NewLogger(factory)
	verificationConfig := appConfig.Verification
	storeRedis := &verification.StoreRedis{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	storePQ := &verification.StorePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	verificationService := &verification.Service{
		Logger:      verificationLogger,
		Config:      verificationConfig,
		Clock:       clockClock,
		CodeStore:   storeRedis,
		ClaimStore:  storePQ,
		RateLimiter: limiter,
	}
	storeDeviceTokenRedis := &mfa.StoreDeviceTokenRedis{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	storeRecoveryCodePQ := &mfa.StoreRecoveryCodePQ{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	mfaService := &mfa.Service{
		DeviceTokens:  storeDeviceTokenRedis,
		RecoveryCodes: storeRecoveryCodePQ,
		Clock:         clockClock,
		Config:        authenticationConfig,
		RateLimiter:   limiter,
	}
	coordinator := &facade.Coordinator{
		Identities:     serviceService,
		Authenticators: service3,
		Verification:   verificationService,
		MFA:            mfaService,
		IdentityConfig: identityConfig,
	}
	identityFacade := facade.IdentityFacade{
		Coordinator: coordinator,
	}
	authenticatorFacade := facade.AuthenticatorFacade{
		Coordinator: coordinator,
	}
	defaultTemplateLanguage := deps.ProvideDefaultTemplateLanguage(config)
	resolver := &template.Resolver{
		Resources:          manager,
		DefaultLanguageTag: defaultTemplateLanguage,
	}
	engine := &template.Engine{
		Resolver: resolver,
	}
	httpConfig := appConfig.HTTP
	localizationConfig := appConfig.Localization
	staticAssetURLPrefix := environmentConfig.StaticAssetURLPrefix
	staticAssetResolver := &web.StaticAssetResolver{
		Context:            context,
		Config:             httpConfig,
		Localization:       localizationConfig,
		StaticAssetsPrefix: staticAssetURLPrefix,
		Resources:          manager,
	}
	translationService := &translation.Service{
		Context:           context,
		EnvironmentConfig: environmentConfig,
		TemplateEngine:    engine,
		StaticAssets:      staticAssetResolver,
	}
	mainOriginProvider := &MainOriginProvider{
		Request:    request,
		TrustProxy: trustProxy,
	}
	endpointsProvider := &EndpointsProvider{
		OriginProvider: mainOriginProvider,
	}
	queue := appProvider.TaskQueue
	messageSender := &otp.MessageSender{
		Translation: translationService,
		Endpoints:   endpointsProvider,
		RateLimiter: limiter,
		TaskQueue:   queue,
	}
	codeSender := &oob.CodeSender{
		OTPMessageSender: messageSender,
	}
	oAuthClientCredentials := deps.ProvideOAuthClientCredentials(secretConfig)
	urlProvider := &webapp.URLProvider{
		Endpoints: endpointsProvider,
	}
	userInfoDecoder := sso.UserInfoDecoder{
		LoginIDNormalizerFactory: normalizerFactory,
	}
	oAuthProviderFactory := &sso.OAuthProviderFactory{
		Endpoints:                endpointsProvider,
		IdentityConfig:           identityConfig,
		Credentials:              oAuthClientCredentials,
		RedirectURL:              urlProvider,
		Clock:                    clockClock,
		UserInfoDecoder:          userInfoDecoder,
		LoginIDNormalizerFactory: normalizerFactory,
	}
	forgotPasswordConfig := appConfig.ForgotPassword
	forgotpasswordStore := &forgotpassword.Store{
		AppID: appID,
		Redis: handle,
	}
	providerLogger := forgotpassword.NewProviderLogger(factory)
	forgotpasswordProvider := &forgotpassword.Provider{
		Translation:    translationService,
		Config:         forgotPasswordConfig,
		Store:          forgotpasswordStore,
		Clock:          clockClock,
		URLs:           urlProvider,
		TaskQueue:      queue,
		Logger:         providerLogger,
		Identities:     identityFacade,
		Authenticators: authenticatorFacade,
		RateLimiter:    limiter,
	}
	verificationCodeSender := &verification.CodeSender{
		OTPMessageSender: messageSender,
		WebAppURLs:       urlProvider,
	}
	challengeProvider := &challenge.Provider{
		Redis: handle,
		AppID: appID,
		Clock: clockClock,
	}
	userStore := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	welcomeMessageConfig := appConfig.WelcomeMessage
	welcomemessageProvider := &welcomemessage.Provider{
		Translation:          translationService,
		RateLimiter:          limiter,
		WelcomeMessageConfig: welcomeMessageConfig,
		TaskQueue:            queue,
	}
	queries := &user.Queries{
		Store:        userStore,
		Identities:   identityFacade,
		Verification: verificationService,
	}
	rawCommands := &user.RawCommands{
		Store:                  userStore,
		Clock:                  clockClock,
		WelcomeMessageProvider: welcomemessageProvider,
		Queries:                queries,
	}
	hookLogger := hook.NewLogger(factory)
	rawProvider := &user.RawProvider{
		RawCommands: rawCommands,
		Queries:     queries,
	}
	hookStore := &hook.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	hookConfig := appConfig.Hook
	webhookKeyMaterials := deps.ProvideWebhookKeyMaterials(secretConfig)
	syncHTTPClient := hook.NewSyncHTTPClient(hookConfig)
	asyncHTTPClient := hook.NewAsyncHTTPClient()
	deliverer := &hook.Deliverer{
		Config:    hookConfig,
		Secret:    webhookKeyMaterials,
		Clock:     clockClock,
		SyncHTTP:  syncHTTPClient,
		AsyncHTTP: asyncHTTPClient,
	}
	hookProvider := &hook.Provider{
		Context:   context,
		Logger:    hookLogger,
		Database:  dbHandle,
		Clock:     clockClock,
		Users:     rawProvider,
		Store:     hookStore,
		Deliverer: deliverer,
	}
	commands := &user.Commands{
		Raw:          rawCommands,
		Hooks:        hookProvider,
		Verification: verificationService,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	cookieFactory := deps.NewCookieFactory(request, trustProxy)
	storeRedisLogger := idpsession.NewStoreRedisLogger(factory)
	idpsessionStoreRedis := &idpsession.StoreRedis{
		Redis:  handle,
		AppID:  appID,
		Clock:  clockClock,
		Logger: storeRedisLogger,
	}
	eventStoreRedis := &access.EventStoreRedis{
		Redis: handle,
		AppID: appID,
	}
	eventProvider := &access.EventProvider{
		Store: eventStoreRedis,
	}
	sessionConfig := appConfig.Session
	idpsessionRand := _wireRandValue
	idpsessionProvider := &idpsession.Provider{
		Request:      request,
		Store:        idpsessionStoreRedis,
		AccessEvents: eventProvider,
		TrustProxy:   trustProxy,
		Config:       sessionConfig,
		Clock:        clockClock,
		Random:       idpsessionRand,
	}
	cookieDef := idpsession.NewSessionCookieDef(httpConfig, sessionConfig)
	mfaCookieDef := mfa.NewDeviceTokenCookieDef(httpConfig, authenticationConfig)
	interactionContext := &interaction.Context{
		Request:                  request,
		Database:                 sqlExecutor,
		Clock:                    clockClock,
		Config:                   appConfig,
		TrustProxy:               trustProxy,
		Identities:               identityFacade,
		Authenticators:           authenticatorFacade,
		AnonymousIdentities:      anonymousProvider,
		OOBAuthenticators:        oobProvider,
		OOBCodeSender:            codeSender,
		OAuthProviderFactory:     oAuthProviderFactory,
		MFA:                      mfaService,
		ForgotPassword:           forgotpasswordProvider,
		ResetPassword:            forgotpasswordProvider,
		LoginIDNormalizerFactory: normalizerFactory,
		Verification:             verificationService,
		VerificationCodeSender:   verificationCodeSender,
		RateLimiter:              limiter,
		Challenges:               challengeProvider,
		Users:                    userProvider,
		Hooks:                    hookProvider,
		CookieFactory:            cookieFactory,
		Sessions:                 idpsessionProvider,
		SessionCookie:            cookieDef,
		MFADeviceTokenCookie:     mfaCookieDef,
	}
	interactionStoreRedis := &interaction.StoreRedis{
		Redis: handle,
		AppID: appID,
	}
	interactionService := &interaction.Service{
		Logger:  logger,
		Context: interactionContext,
		Store:   interactionStoreRedis,
	}
	stateMiddleware := &webapp.StateMiddleware{
		States: redisStore,
		Graphs: interactionService,
	}
	return stateMiddleware
}
