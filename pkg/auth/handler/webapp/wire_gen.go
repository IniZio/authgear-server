// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package webapp

import (
	"github.com/google/wire"
	"github.com/skygeario/skygear-server/pkg/auth"
	auth2 "github.com/skygeario/skygear-server/pkg/auth/dependency/auth"
	redis3 "github.com/skygeario/skygear-server/pkg/auth/dependency/auth/redis"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/bearertoken"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/oob"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/password"
	provider2 "github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/provider"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/recoverycode"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/authenticator/totp"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/challenge"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/forgotpassword"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/hook"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/anonymous"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/loginid"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/oauth"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/provider"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/interaction"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/interaction/flows"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/interaction/redis"
	oauth2 "github.com/skygeario/skygear-server/pkg/auth/dependency/oauth"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/oauth/handler"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/oauth/pq"
	redis2 "github.com/skygeario/skygear-server/pkg/auth/dependency/oauth/redis"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/oidc"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/session"
	redis4 "github.com/skygeario/skygear-server/pkg/auth/dependency/session/redis"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/sso"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/urlprefix"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/user"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/webapp"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/welcomemessage"
	"github.com/skygeario/skygear-server/pkg/core/async"
	"github.com/skygeario/skygear-server/pkg/core/db"
	"github.com/skygeario/skygear-server/pkg/core/logging"
	"github.com/skygeario/skygear-server/pkg/clock"
	"net/http"
)

// Injectors from wire.go:

func newLoginHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	loginHandler := &LoginHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return loginHandler
}

var (
	_wireSystemClockValue    = clock.NewSystemClock()
	_wirePoolValue           = (*db.Pool)(nil)
	_wireTokenGeneratorValue = handler.TokenGenerator(oauth2.GenerateToken)
)

func newEnterPasswordHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	enterPasswordHandler := &EnterPasswordHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return enterPasswordHandler
}

func newForgotPasswordHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	storeImpl := &forgotpassword.StoreImpl{
		Context: context,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := forgotpassword.ProvideProvider(context, staticAssetURLPrefix, tenantConfiguration, storeImpl, queries, hookProvider, clock, urlprefixProvider, engine, queue, passwordFlow, loginidProvider)
	webappForgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProvider,
		RenderProvider:   renderProvider,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	forgotPasswordHandler := &ForgotPasswordHandler{
		Provider:  webappForgotPasswordProvider,
		TxContext: dbContext,
	}
	return forgotPasswordHandler
}

func newForgotPasswordSuccessHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	storeImpl := &forgotpassword.StoreImpl{
		Context: context,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := forgotpassword.ProvideProvider(context, staticAssetURLPrefix, tenantConfiguration, storeImpl, queries, hookProvider, clock, urlprefixProvider, engine, queue, passwordFlow, loginidProvider)
	webappForgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProvider,
		RenderProvider:   renderProvider,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	forgotPasswordSuccessHandler := &ForgotPasswordSuccessHandler{
		Provider:  webappForgotPasswordProvider,
		TxContext: dbContext,
	}
	return forgotPasswordSuccessHandler
}

func newResetPasswordHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	storeImpl := &forgotpassword.StoreImpl{
		Context: context,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := forgotpassword.ProvideProvider(context, staticAssetURLPrefix, tenantConfiguration, storeImpl, queries, hookProvider, clock, urlprefixProvider, engine, queue, passwordFlow, loginidProvider)
	webappForgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProvider,
		RenderProvider:   renderProvider,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	resetPasswordHandler := &ResetPasswordHandler{
		Provider:  webappForgotPasswordProvider,
		TxContext: dbContext,
	}
	return resetPasswordHandler
}

func newResetPasswordSuccessHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	storeImpl := &forgotpassword.StoreImpl{
		Context: context,
	}
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	passwordFlow := &flows.PasswordFlow{
		Interactions: interactionProvider,
	}
	forgotpasswordProvider := forgotpassword.ProvideProvider(context, staticAssetURLPrefix, tenantConfiguration, storeImpl, queries, hookProvider, clock, urlprefixProvider, engine, queue, passwordFlow, loginidProvider)
	webappForgotPasswordProvider := &webapp.ForgotPasswordProvider{
		ValidateProvider: validateProvider,
		RenderProvider:   renderProvider,
		StateProvider:    stateProviderImpl,
		ForgotPassword:   forgotpasswordProvider,
	}
	resetPasswordSuccessHandler := &ResetPasswordSuccessHandler{
		Provider:  webappForgotPasswordProvider,
		TxContext: dbContext,
	}
	return resetPasswordSuccessHandler
}

func newSignupHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	signupHandler := &SignupHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return signupHandler
}

func newPromoteHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	promoteHandler := &PromoteHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return promoteHandler
}

func newCreatePasswordHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	createPasswordHandler := &CreatePasswordHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return createPasswordHandler
}

func newSettingsHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	settingsHandler := &SettingsHandler{
		RenderProvider: renderProvider,
	}
	return settingsHandler
}

func newSettingsIdentityHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	settingsIdentityHandler := &SettingsIdentityHandler{
		RenderProvider: renderProvider,
		Provider:       authenticateProviderImpl,
		TxContext:      dbContext,
	}
	return settingsIdentityHandler
}

func newOOBOTPHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	oobotpHandler := &OOBOTPHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return oobotpHandler
}

func newEnterLoginIDHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	enterLoginIDHandler := &EnterLoginIDHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return enterLoginIDHandler
}

func newLogoutHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	manager := session.ProvideSessionManager(sessionStore, clock, tenantConfiguration, cookieDef)
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	sessionManager := &oauth2.SessionManager{
		Store: grantStore,
		Clock: clock,
	}
	authSessionManager := &auth2.SessionManager{
		Users:               queries,
		Hooks:               hookProvider,
		IDPSessions:         manager,
		AccessTokenSessions: sessionManager,
	}
	logoutHandler := &LogoutHandler{
		RenderProvider: renderProvider,
		SessionManager: authSessionManager,
		TxContext:      dbContext,
	}
	return logoutHandler
}

func newSSOCallbackHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	validateProvider := webapp.ProvideValidateProvider(tenantConfiguration)
	staticAssetURLPrefix := auth.ProvideStaticAssetURLPrefix(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	clock := _wireSystemClockValue
	sqlBuilder := db.ProvideSQLBuilderOLD(tenantConfiguration)
	pool := _wirePoolValue
	dbContext := db.ProvideContextOLD(context, pool, tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(dbContext)
	historyStoreImpl := password.ProvideHistoryStore(clock, sqlBuilder, sqlExecutor)
	checker := password.ProvideChecker(tenantConfiguration, historyStoreImpl)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	loginidChecker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration, loginidChecker, normalizerFactory)
	oauthProvider := oauth.ProvideProvider(sqlBuilder, sqlExecutor, clock)
	anonymousProvider := anonymous.ProvideProvider(sqlBuilder, sqlExecutor)
	providerProvider := provider.ProvideProvider(tenantConfiguration, loginidProvider, oauthProvider, anonymousProvider)
	renderProvider := webapp.ProvideRenderProvider(staticAssetURLPrefix, tenantConfiguration, engine, checker, providerProvider)
	stateStoreImpl := &webapp.StateStoreImpl{
		Context: context,
	}
	stateProviderImpl := &webapp.StateProviderImpl{
		StateStore: stateStoreImpl,
	}
	stateCodec := sso.ProvideStateCodec(tenantConfiguration)
	store := &user.Store{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	urlprefixProvider := urlprefix.NewProvider(r)
	executor := auth.ProvideTaskExecutor(m)
	queue := async.ProvideTaskQueue(context, dbContext, tenantConfiguration, executor)
	welcomemessageProvider := welcomemessage.ProvideProvider(context, tenantConfiguration, engine, queue)
	rawCommands := user.ProvideRawCommands(store, clock, urlprefixProvider, queue, tenantConfiguration, welcomemessageProvider)
	queries := &user.Queries{
		Store:      store,
		Identities: providerProvider,
	}
	hookUserProvider := &auth.HookUserProvider{
		Queries:     queries,
		RawCommands: rawCommands,
	}
	factory := logging.ProvideLoggerFactory(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, tenantConfiguration, dbContext, clock, hookUserProvider, loginidProvider, factory)
	commands := &user.Commands{
		Raw:   rawCommands,
		Hooks: hookProvider,
	}
	userProvider := &user.Provider{
		Commands: commands,
		Queries:  queries,
	}
	redisStore := redis.ProvideStore(context, tenantConfiguration, clock)
	passwordProvider := password.ProvideProvider(sqlBuilder, sqlExecutor, clock, factory, historyStoreImpl, checker, tenantConfiguration)
	totpProvider := totp.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	oobProvider := oob.ProvideProvider(context, tenantConfiguration, sqlBuilder, sqlExecutor, clock, engine, urlprefixProvider, queue)
	bearertokenProvider := bearertoken.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	recoverycodeProvider := recoverycode.ProvideProvider(sqlBuilder, sqlExecutor, clock, tenantConfiguration)
	provider3 := &provider2.Provider{
		Password:     passwordProvider,
		TOTP:         totpProvider,
		OOBOTP:       oobProvider,
		BearerToken:  bearertokenProvider,
		RecoveryCode: recoverycodeProvider,
	}
	interactionProvider := interaction.ProvideProvider(redisStore, clock, factory, providerProvider, provider3, userProvider, oobProvider, tenantConfiguration, hookProvider)
	authorizationStore := &pq.AuthorizationStore{
		SQLBuilder:  sqlBuilder,
		SQLExecutor: sqlExecutor,
	}
	grantStore := redis2.ProvideGrantStore(context, factory, tenantConfiguration, sqlBuilder, sqlExecutor, clock)
	eventStore := redis3.ProvideEventStore(context, tenantConfiguration)
	accessEventProvider := auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionStore := redis4.ProvideStore(context, tenantConfiguration, clock, factory)
	authAccessEventProvider := &auth2.AccessEventProvider{
		Store: eventStore,
	}
	sessionProvider := session.ProvideSessionProvider(r, sessionStore, authAccessEventProvider, tenantConfiguration)
	isAnonymousIdentityEnabled := flows.ProvideIsAnonymousIdentityEnabled(tenantConfiguration)
	challengeProvider := challenge.ProvideProvider(context, clock, tenantConfiguration)
	anonymousFlow := &flows.AnonymousFlow{
		Enabled:      isAnonymousIdentityEnabled,
		Interactions: interactionProvider,
		Anonymous:    anonymousProvider,
		Challenges:   challengeProvider,
	}
	idTokenIssuer := oidc.ProvideIDTokenIssuer(tenantConfiguration, urlprefixProvider, queries, clock)
	tokenGenerator := _wireTokenGeneratorValue
	tokenHandler := handler.ProvideTokenHandler(r, tenantConfiguration, factory, authorizationStore, grantStore, grantStore, grantStore, accessEventProvider, sessionProvider, anonymousFlow, idTokenIssuer, tokenGenerator, clock)
	insecureCookieConfig := auth.ProvideSessionInsecureCookieConfig(m)
	cookieDef := session.ProvideSessionCookieConfiguration(r, insecureCookieConfig, tenantConfiguration)
	userController := flows.ProvideUserController(userProvider, tokenHandler, cookieDef, sessionProvider, hookProvider, clock, tenantConfiguration)
	webAppFlow := flows.ProvideWebAppFlow(tenantConfiguration, providerProvider, userProvider, hookProvider, interactionProvider, userController)
	redirectURLFunc := provideRedirectURIForWebAppFunc()
	oAuthProviderFactory := sso.ProvideOAuthProviderFactory(tenantConfiguration, urlprefixProvider, clock, normalizerFactory, redirectURLFunc)
	authenticateProviderImpl := &webapp.AuthenticateProviderImpl{
		ValidateProvider:     validateProvider,
		RenderProvider:       renderProvider,
		StateProvider:        stateProviderImpl,
		SSOStateCodec:        stateCodec,
		Interactions:         webAppFlow,
		OAuthProviderFactory: oAuthProviderFactory,
	}
	ssoCallbackHandler := &SSOCallbackHandler{
		Provider:  authenticateProviderImpl,
		TxContext: dbContext,
	}
	return ssoCallbackHandler
}

// wire.go:

func provideRedirectURIForWebAppFunc() sso.RedirectURLFunc {
	return redirectURIForWebApp
}

var dependencySet = wire.NewSet(auth.DependencySet, wire.Bind(new(webapp.OAuthProviderFactory), new(*sso.OAuthProviderFactory)), wire.Struct(new(webapp.AuthenticateProviderImpl), "*"), wire.Bind(new(webapp.ForgotPassword), new(*forgotpassword.Provider)), wire.Struct(new(webapp.ForgotPasswordProvider), "*"), provideRedirectURIForWebAppFunc)
