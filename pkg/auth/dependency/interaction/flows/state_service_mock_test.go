// Code generated by MockGen. DO NOT EDIT.
// Source: state_service.go

// Package flows is a generated GoMock package.
package flows

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStateStore is a mock of StateStore interface
type MockStateStore struct {
	ctrl     *gomock.Controller
	recorder *MockStateStoreMockRecorder
}

// MockStateStoreMockRecorder is the mock recorder for MockStateStore
type MockStateStoreMockRecorder struct {
	mock *MockStateStore
}

// NewMockStateStore creates a new mock instance
func NewMockStateStore(ctrl *gomock.Controller) *MockStateStore {
	mock := &MockStateStore{ctrl: ctrl}
	mock.recorder = &MockStateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateStore) EXPECT() *MockStateStoreMockRecorder {
	return m.recorder
}

// CreateState mocks base method
func (m *MockStateStore) CreateState(state *State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateState indicates an expected call of CreateState
func (mr *MockStateStoreMockRecorder) CreateState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateState", reflect.TypeOf((*MockStateStore)(nil).CreateState), state)
}

// UpdateState mocks base method
func (m *MockStateStore) UpdateState(state *State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockStateStoreMockRecorder) UpdateState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockStateStore)(nil).UpdateState), state)
}

// DeleteState mocks base method
func (m *MockStateStore) DeleteState(flowID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteState", flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteState indicates an expected call of DeleteState
func (mr *MockStateStoreMockRecorder) DeleteState(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockStateStore)(nil).DeleteState), flowID)
}

// GetState mocks base method
func (m *MockStateStore) GetState(instanceID string) (*State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", instanceID)
	ret0, _ := ret[0].(*State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState
func (mr *MockStateStoreMockRecorder) GetState(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateStore)(nil).GetState), instanceID)
}
