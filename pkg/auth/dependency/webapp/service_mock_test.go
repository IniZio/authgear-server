// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package webapp is a generated GoMock package.
package webapp

import (
	newinteraction "github.com/authgear/authgear-server/pkg/auth/dependency/newinteraction"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockErrorRedirectURIGetter is a mock of ErrorRedirectURIGetter interface
type MockErrorRedirectURIGetter struct {
	ctrl     *gomock.Controller
	recorder *MockErrorRedirectURIGetterMockRecorder
}

// MockErrorRedirectURIGetterMockRecorder is the mock recorder for MockErrorRedirectURIGetter
type MockErrorRedirectURIGetterMockRecorder struct {
	mock *MockErrorRedirectURIGetter
}

// NewMockErrorRedirectURIGetter creates a new mock instance
func NewMockErrorRedirectURIGetter(ctrl *gomock.Controller) *MockErrorRedirectURIGetter {
	mock := &MockErrorRedirectURIGetter{ctrl: ctrl}
	mock.recorder = &MockErrorRedirectURIGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorRedirectURIGetter) EXPECT() *MockErrorRedirectURIGetterMockRecorder {
	return m.recorder
}

// GetErrorRedirectURI mocks base method
func (m *MockErrorRedirectURIGetter) GetErrorRedirectURI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorRedirectURI")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorRedirectURI indicates an expected call of GetErrorRedirectURI
func (mr *MockErrorRedirectURIGetterMockRecorder) GetErrorRedirectURI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorRedirectURI", reflect.TypeOf((*MockErrorRedirectURIGetter)(nil).GetErrorRedirectURI))
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStore) Create(state *State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStoreMockRecorder) Create(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), state)
}

// Get mocks base method
func (m *MockStore) Get(instanceID string) (*State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", instanceID)
	ret0, _ := ret[0].(*State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), instanceID)
}

// MockGraphService is a mock of GraphService interface
type MockGraphService struct {
	ctrl     *gomock.Controller
	recorder *MockGraphServiceMockRecorder
}

// MockGraphServiceMockRecorder is the mock recorder for MockGraphService
type MockGraphServiceMockRecorder struct {
	mock *MockGraphService
}

// NewMockGraphService creates a new mock instance
func NewMockGraphService(ctrl *gomock.Controller) *MockGraphService {
	mock := &MockGraphService{ctrl: ctrl}
	mock.recorder = &MockGraphServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGraphService) EXPECT() *MockGraphServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGraphService) Get(instanceID string) (*newinteraction.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", instanceID)
	ret0, _ := ret[0].(*newinteraction.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGraphServiceMockRecorder) Get(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGraphService)(nil).Get), instanceID)
}

// WithContext mocks base method
func (m *MockGraphService) WithContext(fn func(*newinteraction.Context) (*newinteraction.Graph, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (mr *MockGraphServiceMockRecorder) WithContext(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockGraphService)(nil).WithContext), fn)
}

// NewGraph mocks base method
func (m *MockGraphService) NewGraph(ctx *newinteraction.Context, intent newinteraction.Intent) (*newinteraction.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGraph", ctx, intent)
	ret0, _ := ret[0].(*newinteraction.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGraph indicates an expected call of NewGraph
func (mr *MockGraphServiceMockRecorder) NewGraph(ctx, intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGraph", reflect.TypeOf((*MockGraphService)(nil).NewGraph), ctx, intent)
}
