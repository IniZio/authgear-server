// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package newinteraction_test is a generated GoMock package.
package newinteraction_test

import (
	newinteraction "github.com/authgear/authgear-server/pkg/auth/dependency/newinteraction"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockNode) Apply(ctx *newinteraction.Context, graph *newinteraction.Graph) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, graph)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockNodeMockRecorder) Apply(ctx, graph interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNode)(nil).Apply), ctx, graph)
}

// DeriveEdges mocks base method
func (m *MockNode) DeriveEdges(ctx *newinteraction.Context, graph *newinteraction.Graph) ([]newinteraction.Edge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveEdges", ctx, graph)
	ret0, _ := ret[0].([]newinteraction.Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveEdges indicates an expected call of DeriveEdges
func (mr *MockNodeMockRecorder) DeriveEdges(ctx, graph interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveEdges", reflect.TypeOf((*MockNode)(nil).DeriveEdges), ctx, graph)
}

// MockEdge is a mock of Edge interface
type MockEdge struct {
	ctrl     *gomock.Controller
	recorder *MockEdgeMockRecorder
}

// MockEdgeMockRecorder is the mock recorder for MockEdge
type MockEdgeMockRecorder struct {
	mock *MockEdge
}

// NewMockEdge creates a new mock instance
func NewMockEdge(ctrl *gomock.Controller) *MockEdge {
	mock := &MockEdge{ctrl: ctrl}
	mock.recorder = &MockEdgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEdge) EXPECT() *MockEdgeMockRecorder {
	return m.recorder
}

// Instantiate mocks base method
func (m *MockEdge) Instantiate(ctx *newinteraction.Context, graph *newinteraction.Graph, input interface{}) (newinteraction.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instantiate", ctx, graph, input)
	ret0, _ := ret[0].(newinteraction.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instantiate indicates an expected call of Instantiate
func (mr *MockEdgeMockRecorder) Instantiate(ctx, graph, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instantiate", reflect.TypeOf((*MockEdge)(nil).Instantiate), ctx, graph, input)
}
