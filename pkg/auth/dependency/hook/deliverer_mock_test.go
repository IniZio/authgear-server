// Code generated by MockGen. DO NOT EDIT.
// Source: deliverer.go

// Package hook is a generated GoMock package.
package hook

import (
	event "github.com/authgear/authgear-server/pkg/auth/event"
	model "github.com/authgear/authgear-server/pkg/auth/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMutatorFactory is a mock of mutatorFactory interface
type MockMutatorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMutatorFactoryMockRecorder
}

// MockMutatorFactoryMockRecorder is the mock recorder for MockMutatorFactory
type MockMutatorFactoryMockRecorder struct {
	mock *MockMutatorFactory
}

// NewMockMutatorFactory creates a new mock instance
func NewMockMutatorFactory(ctrl *gomock.Controller) *MockMutatorFactory {
	mock := &MockMutatorFactory{ctrl: ctrl}
	mock.recorder = &MockMutatorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMutatorFactory) EXPECT() *MockMutatorFactoryMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockMutatorFactory) New(event *event.Event, user *model.User) Mutator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", event, user)
	ret0, _ := ret[0].(Mutator)
	return ret0
}

// New indicates an expected call of New
func (mr *MockMutatorFactoryMockRecorder) New(event, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockMutatorFactory)(nil).New), event, user)
}
