// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package middlewares

import (
	"github.com/google/wire"
	"github.com/gorilla/mux"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/auth"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/webapp"
	"github.com/skygeario/skygear-server/pkg/deps"
	"net/http"
)

// Injectors from wire.go:

func NewCSRFMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	appProvider := p.AppProvider
	config := appProvider.Config
	secretConfig := config.SecretConfig
	csrfKeyMaterials := deps.ProvideCSRFKeyMaterials(secretConfig)
	rootProvider := appProvider.RootProvider
	serverConfig := rootProvider.ServerConfig
	csrfMiddleware := &webapp.CSRFMiddleware{
		Secret: csrfKeyMaterials,
		Config: serverConfig,
	}
	middlewareFunc := provideMiddleware(csrfMiddleware)
	return middlewareFunc
}

// wire.go:

type Middleware interface {
	Handle(next http.Handler) http.Handler
}

func provideMiddleware(m Middleware) mux.MiddlewareFunc { return m.Handle }

var depSet = wire.NewSet(deps.RequestDependencySet, provideMiddleware)

func NewSessionMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	return (*auth.Middleware)(nil).Handle
}

func NewCSPMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	return (*webapp.CSPMiddleware)(nil).Handle
}

func NewStateMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	return (*webapp.StateMiddleware)(nil).Handle
}

func NewClientIDMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	return (*webapp.ClientIDMiddleware)(nil).Handle
}

func NewCORSMiddleware(p *deps.RequestProvider) mux.MiddlewareFunc {
	return (*CORSMiddleware)(nil).Handle
}
